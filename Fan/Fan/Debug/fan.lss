
fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  000020e8  0000217c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  008001de  008001de  0000225a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d25  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000144e  00000000  00000000  000053d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000207e  00000000  00000000  00006823  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000950  00000000  00000000  000088a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd4  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143d  00000000  00000000  00009dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_3>
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_9>
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_16>
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_18>
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ee       	ldi	r30, 0xE8	; 232
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3d       	cpi	r26, 0xDE	; 222
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ae ed       	ldi	r26, 0xDE	; 222
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 39       	cpi	r26, 0x90	; 144
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <main>
      c6:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <fan_Timer_incMilisec>:
	fan_buzzer();
}

void fan_Timer_incMilisec()
{
	milisec = (milisec + 1) % 1000;
      cc:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <milisec>
      d0:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <milisec+0x1>
      d4:	4f 5f       	subi	r20, 0xFF	; 255
      d6:	5f 4f       	sbci	r21, 0xFF	; 255
      d8:	9a 01       	movw	r18, r20
      da:	36 95       	lsr	r19
      dc:	27 95       	ror	r18
      de:	36 95       	lsr	r19
      e0:	27 95       	ror	r18
      e2:	36 95       	lsr	r19
      e4:	27 95       	ror	r18
      e6:	a5 ec       	ldi	r26, 0xC5	; 197
      e8:	b0 e2       	ldi	r27, 0x20	; 32
      ea:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__umulhisi3>
      ee:	92 95       	swap	r25
      f0:	82 95       	swap	r24
      f2:	8f 70       	andi	r24, 0x0F	; 15
      f4:	89 27       	eor	r24, r25
      f6:	9f 70       	andi	r25, 0x0F	; 15
      f8:	89 27       	eor	r24, r25
      fa:	68 ee       	ldi	r22, 0xE8	; 232
      fc:	73 e0       	ldi	r23, 0x03	; 3
      fe:	86 9f       	mul	r24, r22
     100:	90 01       	movw	r18, r0
     102:	87 9f       	mul	r24, r23
     104:	30 0d       	add	r19, r0
     106:	96 9f       	mul	r25, r22
     108:	30 0d       	add	r19, r0
     10a:	11 24       	eor	r1, r1
     10c:	ca 01       	movw	r24, r20
     10e:	82 1b       	sub	r24, r18
     110:	93 0b       	sbc	r25, r19
     112:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <milisec+0x1>
     116:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <milisec>
	if(milisec) return;
     11a:	89 2b       	or	r24, r25
     11c:	11 f5       	brne	.+68     	; 0x162 <fan_Timer_incMilisec+0x96>

	sec = (sec + 1) % 60;
     11e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <sec>
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	6c e3       	ldi	r22, 0x3C	; 60
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     12e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <sec>
	if(sec) return;
     132:	81 11       	cpse	r24, r1
     134:	16 c0       	rjmp	.+44     	; 0x162 <fan_Timer_incMilisec+0x96>

	min = (min + 1) % 60;
     136:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <min>
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	6c e3       	ldi	r22, 0x3C	; 60
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     146:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <min>
	if (min) return;
     14a:	81 11       	cpse	r24, r1
     14c:	0a c0       	rjmp	.+20     	; 0x162 <fan_Timer_incMilisec+0x96>

	hour = (hour + 1) % 24;
     14e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <hour>
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	01 96       	adiw	r24, 0x01	; 1
     156:	68 e1       	ldi	r22, 0x18	; 24
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     15e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <hour>
     162:	08 95       	ret

00000164 <fan_setTimerMin>:
}

void fan_setTimerMin()
{
	milisec = 0;
     164:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <milisec+0x1>
     168:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <milisec>
	sec = 0;
     16c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <sec>
	min = 0;
     170:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <min>
	hour = 0;
     174:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <hour>
	
	tmin = (tmin + 1)%60;
     178:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	6c e3       	ldi	r22, 0x3C	; 60
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     188:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <tmin>
     18c:	08 95       	ret

0000018e <fan_setTimerSec>:
}

void fan_setTimerSec()
{
	milisec = 0;
     18e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <milisec+0x1>
     192:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <milisec>
	sec = 0;
     196:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <sec>
	min = 0;
     19a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <min>
	hour = 0;
     19e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <hour>
	
	tsec = (tsec + 1)%60;
     1a2:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	6c e3       	ldi	r22, 0x3C	; 60
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     1b2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <tsec>
     1b6:	08 95       	ret

000001b8 <fan_normal>:
}

void fan_normal()
{
	if(normalState == MODE1)
     1b8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <normalState>
     1bc:	81 11       	cpse	r24, r1
     1be:	08 c0       	rjmp	.+16     	; 0x1d0 <fan_normal+0x18>
	{
		Motor_On();
     1c0:	0e 94 38 0a 	call	0x1470	; 0x1470 <Motor_On>
		Motor_makeHerz(1000, 4);
     1c4:	64 e0       	ldi	r22, 0x04	; 4
     1c6:	88 ee       	ldi	r24, 0xE8	; 232
     1c8:	93 e0       	ldi	r25, 0x03	; 3
     1ca:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <Motor_makeHerz>
     1ce:	08 95       	ret
	}
	else if(normalState == MODE2)
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	41 f4       	brne	.+16     	; 0x1e4 <fan_normal+0x2c>
	{
		Motor_On();
     1d4:	0e 94 38 0a 	call	0x1470	; 0x1470 <Motor_On>
		Motor_makeHerz(1000, 3);
     1d8:	63 e0       	ldi	r22, 0x03	; 3
     1da:	88 ee       	ldi	r24, 0xE8	; 232
     1dc:	93 e0       	ldi	r25, 0x03	; 3
     1de:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <Motor_makeHerz>
     1e2:	08 95       	ret
	}
	else if(normalState == MODE3)
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	39 f4       	brne	.+14     	; 0x1f6 <fan_normal+0x3e>
	{
		Motor_On();
     1e8:	0e 94 38 0a 	call	0x1470	; 0x1470 <Motor_On>
		Motor_makeHerz(1000, 1);
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	88 ee       	ldi	r24, 0xE8	; 232
     1f0:	93 e0       	ldi	r25, 0x03	; 3
     1f2:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <Motor_makeHerz>
     1f6:	08 95       	ret

000001f8 <Motor_Safety>:
}

void Motor_Safety()
{
	uint16_t distance;
	Ultrasonic_trigger();
     1f8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <Ultrasonic_trigger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fc:	8f e9       	ldi	r24, 0x9F	; 159
     1fe:	9f e0       	ldi	r25, 0x0F	; 15
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <Motor_Safety+0x8>
     204:	00 c0       	rjmp	.+0      	; 0x206 <Motor_Safety+0xe>
     206:	00 00       	nop
	_delay_ms(1);
	
	if(Ultrasonic_getFlag())
     208:	0e 94 a0 0a 	call	0x1540	; 0x1540 <Ultrasonic_getFlag>
     20c:	88 23       	and	r24, r24
     20e:	c9 f0       	breq	.+50     	; 0x242 <Motor_Safety+0x4a>
	{
		Ultrasonic_clearFlag();
     210:	0e 94 9d 0a 	call	0x153a	; 0x153a <Ultrasonic_clearFlag>
		distance = Ultrasonic_getDistance();
     214:	0e 94 82 0a 	call	0x1504	; 0x1504 <Ultrasonic_getDistance>
		if(distance <= 10)
     218:	0b 97       	sbiw	r24, 0x0b	; 11
     21a:	18 f4       	brcc	.+6      	; 0x222 <Motor_Safety+0x2a>
		{
			Motor_Off();
     21c:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <Motor_Off>
     220:	08 95       	ret
		}
		else if((min == tmin) && (sec == tsec))
     222:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <min>
     226:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
     22a:	98 13       	cpse	r25, r24
     22c:	09 c0       	rjmp	.+18     	; 0x240 <Motor_Safety+0x48>
     22e:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <sec>
     232:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
     236:	98 13       	cpse	r25, r24
     238:	03 c0       	rjmp	.+6      	; 0x240 <Motor_Safety+0x48>
		{
			Motor_Off();
     23a:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <Motor_Off>
     23e:	08 95       	ret
		}
		else
		{
			fan_normal();
     240:	bb cf       	rjmp	.-138    	; 0x1b8 <fan_normal>
     242:	08 95       	ret

00000244 <fan_buzzer>:
	}
}

void fan_buzzer()
{
	Buzzer_soundOn();
     244:	da d6       	rcall	.+3508   	; 0xffa <Buzzer_soundOn>
	Buzzer_makeHerz(1000);
     246:	88 ee       	ldi	r24, 0xE8	; 232
     248:	93 e0       	ldi	r25, 0x03	; 3
     24a:	e3 d6       	rcall	.+3526   	; 0x1012 <Buzzer_makeHerz>
     24c:	2f ef       	ldi	r18, 0xFF	; 255
     24e:	83 ec       	ldi	r24, 0xC3	; 195
     250:	99 e0       	ldi	r25, 0x09	; 9
     252:	21 50       	subi	r18, 0x01	; 1
     254:	80 40       	sbci	r24, 0x00	; 0
     256:	90 40       	sbci	r25, 0x00	; 0
     258:	e1 f7       	brne	.-8      	; 0x252 <fan_buzzer+0xe>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <fan_buzzer+0x18>
     25c:	00 00       	nop
	_delay_ms(200);
	TCNT3 = 0;
     25e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     262:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	Buzzer_soundOff();
     266:	cf c6       	rjmp	.+3486   	; 0x1006 <Buzzer_soundOff>
     268:	08 95       	ret

0000026a <fan_init>:

char buff[20] = {0,};

void fan_init()
{
	Button_init(&btnOnOff, &DDRA, &PINA, 0);
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	49 e3       	ldi	r20, 0x39	; 57
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	6a e3       	ldi	r22, 0x3A	; 58
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 e1       	ldi	r24, 0x10	; 16
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	77 d6       	rcall	.+3310   	; 0xf68 <Button_init>
	
	Button_init(&btnTimer, &DDRA, &PINA, 1);
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	49 e3       	ldi	r20, 0x39	; 57
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	6a e3       	ldi	r22, 0x3A	; 58
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	87 e1       	ldi	r24, 0x17	; 23
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	6f d6       	rcall	.+3294   	; 0xf68 <Button_init>
	Button_init(&btnMin, &DDRA, &PINA, 2);
     28a:	22 e0       	ldi	r18, 0x02	; 2
     28c:	49 e3       	ldi	r20, 0x39	; 57
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	6a e3       	ldi	r22, 0x3A	; 58
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	8a e0       	ldi	r24, 0x0A	; 10
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	67 d6       	rcall	.+3278   	; 0xf68 <Button_init>
	Button_init(&btnSec, &DDRA, &PINA, 3);
     29a:	23 e0       	ldi	r18, 0x03	; 3
     29c:	49 e3       	ldi	r20, 0x39	; 57
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	6a e3       	ldi	r22, 0x3A	; 58
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	88 ef       	ldi	r24, 0xF8	; 248
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	5f d6       	rcall	.+3262   	; 0xf68 <Button_init>
	
	Button_init(&btnNormal, &DDRA, &PINA, 2);
     2aa:	22 e0       	ldi	r18, 0x02	; 2
     2ac:	49 e3       	ldi	r20, 0x39	; 57
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	6a e3       	ldi	r22, 0x3A	; 58
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	84 e0       	ldi	r24, 0x04	; 4
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	57 d6       	rcall	.+3246   	; 0xf68 <Button_init>
	Button_init(&btnNext, &DDRA, &PINA, 3);
     2ba:	23 e0       	ldi	r18, 0x03	; 3
     2bc:	49 e3       	ldi	r20, 0x39	; 57
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	6a e3       	ldi	r22, 0x3A	; 58
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	82 e2       	ldi	r24, 0x22	; 34
     2c6:	92 e0       	ldi	r25, 0x02	; 2
	
	Motor_init();
     2c8:	4f d6       	rcall	.+3230   	; 0xf68 <Button_init>
     2ca:	0e 94 25 0a 	call	0x144a	; 0x144a <Motor_init>
	LCD_init();
     2ce:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCD_init>
	FND_init();
     2d2:	bd d6       	rcall	.+3450   	; 0x104e <FND_init>
	Buzzer_init();
     2d4:	7f d6       	rcall	.+3326   	; 0xfd4 <Buzzer_init>
     2d6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Ultrasonic_init>
	Ultrasonic_init();
     2da:	0e 94 c8 0b 	call	0x1790	; 0x1790 <UART0_init>
	UART0_init();
     2de:	0e 94 b3 0b 	call	0x1766	; 0x1766 <TIM0_init>
	
	TIM0_init();
     2e2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <TIM2_init>
	TIM2_init();
     2e6:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <state>
	
	state = OFF_SETTING;
     2ea:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <normalState>
	normalState = MODE1;
     2ee:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <milisec+0x1>
	
	milisec = 0;
     2f2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <milisec>
     2f6:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <sec>
	sec = 0;
     2fa:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <min>
	min = 0;
     2fe:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <hour>
	hour = 0;
     302:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <tsec>

	tsec = 0;
     306:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <tmin>
	tmin = 0;
     30a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <timerData>
	
	timerData = 0;
     30e:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <on_sec>
	
	on_sec = 0;
     312:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <on_min>
	on_min = 0;
     316:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <off_sec>
	off_sec = 0;
     31a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <off_min>
	off_min = 0;
     31e:	0e 94 3e 0a 	call	0x147c	; 0x147c <Motor_Off>

	Motor_Off();
     322:	88 e0       	ldi	r24, 0x08	; 8
	
	sprintf(buff, "Fan Off");
     324:	eb e0       	ldi	r30, 0x0B	; 11
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	ae ed       	ldi	r26, 0xDE	; 222
     32a:	b1 e0       	ldi	r27, 0x01	; 1
     32c:	01 90       	ld	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	8a 95       	dec	r24
     332:	e1 f7       	brne	.-8      	; 0x32c <fan_init+0xc2>
     334:	4e ed       	ldi	r20, 0xDE	; 222
	LCD_writeStringXY(0, 0, buff);
     336:	51 e0       	ldi	r21, 0x01	; 1
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_writeStringXY>
     340:	81 e1       	ldi	r24, 0x11	; 17
	sprintf(buff, "2:TIMER|3:NORMAL");
     342:	e3 e1       	ldi	r30, 0x13	; 19
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	ae ed       	ldi	r26, 0xDE	; 222
     348:	b1 e0       	ldi	r27, 0x01	; 1
     34a:	01 90       	ld	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	8a 95       	dec	r24
     350:	e1 f7       	brne	.-8      	; 0x34a <fan_init+0xe0>
	LCD_writeStringXY(1, 0, buff);
     352:	4e ed       	ldi	r20, 0xDE	; 222
     354:	51 e0       	ldi	r21, 0x01	; 1
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_writeStringXY>
	
	fan_buzzer();
     35e:	72 cf       	rjmp	.-284    	; 0x244 <fan_buzzer>
     360:	08 95       	ret

00000362 <fan_Ultrasonic_ISR_Process>:
     362:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <Ultrasonic_ISR_Process>
	Buzzer_soundOff();
}

void fan_Ultrasonic_ISR_Process()
{
	Ultrasonic_ISR_Process();
     366:	08 95       	ret

00000368 <fan_FND_ISR_Process>:
}

void fan_FND_ISR_Process()
{
	FND_ISR_Process();
     368:	b8 c7       	rjmp	.+3952   	; 0x12da <FND_ISR_Process>
     36a:	08 95       	ret

0000036c <fan_UART0_ISR_Process>:
}

void fan_UART0_ISR_Process()
{
	UART0_ISR_Process();
     36c:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <UART0_ISR_Process>
     370:	08 95       	ret

00000372 <fan_Motor_On>:
}

void fan_Motor_On()
{
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
	fan_buzzer();
     376:	66 df       	rcall	.-308    	; 0x244 <fan_buzzer>
	fan_normal();
     378:	1f df       	rcall	.-450    	; 0x1b8 <fan_normal>
     37a:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_displayClear>
	LCD_displayClear();
     37e:	ce ed       	ldi	r28, 0xDE	; 222
	sprintf(buff, "Fan Speed");
     380:	d1 e0       	ldi	r29, 0x01	; 1
     382:	8a e0       	ldi	r24, 0x0A	; 10
     384:	e4 e2       	ldi	r30, 0x24	; 36
     386:	f1 e0       	ldi	r31, 0x01	; 1
     388:	de 01       	movw	r26, r28
     38a:	01 90       	ld	r0, Z+
     38c:	0d 92       	st	X+, r0
     38e:	8a 95       	dec	r24
     390:	e1 f7       	brne	.-8      	; 0x38a <fan_Motor_On+0x18>
     392:	ae 01       	movw	r20, r28
	LCD_writeStringXY(0, 0, buff);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_writeStringXY>
     39c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <normalState>
	sprintf(buff, "%d", normalState);
     3a0:	1f 92       	push	r1
     3a2:	8f 93       	push	r24
     3a4:	8e e2       	ldi	r24, 0x2E	; 46
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	df 93       	push	r29
     3ae:	cf 93       	push	r28
     3b0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     3b4:	ae 01       	movw	r20, r28
	LCD_writeStringXY(1, 0, buff);
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_writeStringXY>
     3be:	0f 90       	pop	r0
}
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <fan_Motor_Off>:
     3d0:	cf 93       	push	r28

void fan_Motor_Off()
{
     3d2:	df 93       	push	r29
	fan_buzzer();
     3d4:	37 df       	rcall	.-402    	; 0x244 <fan_buzzer>
	Motor_Off();
     3d6:	0e 94 3e 0a 	call	0x147c	; 0x147c <Motor_Off>
	LCD_displayClear();
     3da:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_displayClear>
	sprintf(buff, "Fan Speed");
     3de:	ce ed       	ldi	r28, 0xDE	; 222
     3e0:	d1 e0       	ldi	r29, 0x01	; 1
     3e2:	8a e0       	ldi	r24, 0x0A	; 10
     3e4:	e4 e2       	ldi	r30, 0x24	; 36
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	de 01       	movw	r26, r28
     3ea:	01 90       	ld	r0, Z+
     3ec:	0d 92       	st	X+, r0
     3ee:	8a 95       	dec	r24
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <fan_Motor_Off+0x1a>
	LCD_writeStringXY(0, 0, buff);
     3f2:	ae 01       	movw	r20, r28
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_writeStringXY>
	sprintf(buff, "%d", normalState);
     3fc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <normalState>
     400:	1f 92       	push	r1
     402:	8f 93       	push	r24
     404:	8e e2       	ldi	r24, 0x2E	; 46
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	df 93       	push	r29
     40e:	cf 93       	push	r28
     410:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
	LCD_writeStringXY(1, 0, buff);
     414:	ae 01       	movw	r20, r28
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_writeStringXY>
}
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <Timer_reset>:

void Timer_reset()
{
	milisec = 0;
     430:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <milisec+0x1>
     434:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <milisec>
	sec = 0;
     438:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <sec>
	min = 0;
     43c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <min>
	hour = 0;
     440:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <hour>
     444:	08 95       	ret

00000446 <fan_UARTCtrl>:
	
	fan_UARTCtrl();
}

void fan_UARTCtrl()
{
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
	if(UART0_getRxFlag())
     44a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <UART0_getRxFlag>
     44e:	88 23       	and	r24, r24
     450:	09 f4       	brne	.+2      	; 0x454 <fan_UARTCtrl+0xe>
     452:	22 c1       	rjmp	.+580    	; 0x698 <fan_UARTCtrl+0x252>
	{
		UART0_clearRxFlag();
     454:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <UART0_clearRxFlag>
		
		uint8_t *rxString = (char *)UART0_getRxBuff();
     458:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <UART0_getRxBuff>
     45c:	ec 01       	movw	r28, r24
		
		if(!strcmp((const char *)rxString, "ON\n"))
     45e:	61 e3       	ldi	r22, 0x31	; 49
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strcmp>
     466:	89 2b       	or	r24, r25
     468:	31 f4       	brne	.+12     	; 0x476 <fan_UARTCtrl+0x30>
		{
			fan_buzzer();
     46a:	ec de       	rcall	.-552    	; 0x244 <fan_buzzer>
			
			fan_normal();
     46c:	a5 de       	rcall	.-694    	; 0x1b8 <fan_normal>
     46e:	83 e0       	ldi	r24, 0x03	; 3
			
			state = OFF_ON;
     470:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
     474:	11 c1       	rjmp	.+546    	; 0x698 <fan_UARTCtrl+0x252>
     476:	65 e3       	ldi	r22, 0x35	; 53
		}
		else if(!strcmp((const char *)rxString, "OFF\n"))
     478:	71 e0       	ldi	r23, 0x01	; 1
     47a:	ce 01       	movw	r24, r28
     47c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strcmp>
     480:	89 2b       	or	r24, r25
     482:	29 f4       	brne	.+10     	; 0x48e <fan_UARTCtrl+0x48>
		{
			fan_buzzer();
     484:	df de       	rcall	.-578    	; 0x244 <fan_buzzer>
     486:	fa d7       	rcall	.+4084   	; 0x147c <Motor_Off>
			
			Motor_Off();
     488:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <state>
			
			state = OFF_SETTING;
     48c:	05 c1       	rjmp	.+522    	; 0x698 <fan_UARTCtrl+0x252>
     48e:	6a e3       	ldi	r22, 0x3A	; 58
     490:	71 e0       	ldi	r23, 0x01	; 1
		}
		else if (!strcmp((const char *)rxString, "FAN_UP\n"))  // 'FAN_UP' 명령 수신 시 팬 속도 증가
     492:	ce 01       	movw	r24, r28
     494:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strcmp>
     498:	89 2b       	or	r24, r25
     49a:	a9 f4       	brne	.+42     	; 0x4c6 <fan_UARTCtrl+0x80>
     49c:	d3 de       	rcall	.-602    	; 0x244 <fan_buzzer>
		{
			fan_buzzer();
     49e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <normalState>
			switch(normalState)
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	41 f0       	breq	.+16     	; 0x4b6 <fan_UARTCtrl+0x70>
     4a6:	18 f0       	brcs	.+6      	; 0x4ae <fan_UARTCtrl+0x68>
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	49 f0       	breq	.+18     	; 0x4be <fan_UARTCtrl+0x78>
     4ac:	0a c0       	rjmp	.+20     	; 0x4c2 <fan_UARTCtrl+0x7c>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <normalState>
			{
				case MODE1 :
				normalState = MODE2;
     4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <fan_UARTCtrl+0x7c>
     4b6:	82 e0       	ldi	r24, 0x02	; 2
				break;
     4b8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <normalState>

				case MODE2 :
				normalState = MODE3;
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <fan_UARTCtrl+0x7c>
				break;
     4be:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <normalState>

				case MODE3 :
				normalState = MODE1;
     4c2:	7a de       	rcall	.-780    	; 0x1b8 <fan_normal>
				break;
			}
			fan_normal();  // 새로운 모드로 팬 동작 시작
     4c4:	e9 c0       	rjmp	.+466    	; 0x698 <fan_UARTCtrl+0x252>
     4c6:	62 e4       	ldi	r22, 0x42	; 66
     4c8:	71 e0       	ldi	r23, 0x01	; 1
		}
		else if (!strcmp((const char *)rxString, "ON_MIN+\n"))  // 'ON_MIN+' 명령 수신 시 ON 상태에서 타이머 분 증가
     4ca:	ce 01       	movw	r24, r28
     4cc:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strcmp>
     4d0:	89 2b       	or	r24, r25
     4d2:	61 f5       	brne	.+88     	; 0x52c <fan_UARTCtrl+0xe6>
     4d4:	b7 de       	rcall	.-658    	; 0x244 <fan_buzzer>
		{
			fan_buzzer();
     4d6:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <on_min>
			
			on_min = (on_min + 1) % 60;  // ON 상태 타이머 분 증가
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	6c e3       	ldi	r22, 0x3C	; 60
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     4e6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <on_min>
     4ea:	ac d7       	rcall	.+3928   	; 0x1444 <LCD_displayClear>

			LCD_displayClear();
     4ec:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <on_sec>
			sprintf(buff, "ON Timer: %02d:%02d", on_min, on_sec);
     4f0:	1f 92       	push	r1
     4f2:	8f 93       	push	r24
     4f4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <on_min>
     4f8:	1f 92       	push	r1
     4fa:	8f 93       	push	r24
     4fc:	8b e4       	ldi	r24, 0x4B	; 75
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	8e ed       	ldi	r24, 0xDE	; 222
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     510:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(0, 0, buff);
     512:	51 e0       	ldi	r21, 0x01	; 1
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	8c d7       	rcall	.+3864   	; 0x1432 <LCD_writeStringXY>
     51a:	8d b7       	in	r24, 0x3d	; 61
     51c:	9e b7       	in	r25, 0x3e	; 62
     51e:	08 96       	adiw	r24, 0x08	; 8
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	9e bf       	out	0x3e, r25	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	8d bf       	out	0x3d, r24	; 61
     52a:	b6 c0       	rjmp	.+364    	; 0x698 <fan_UARTCtrl+0x252>
     52c:	6f e5       	ldi	r22, 0x5F	; 95
     52e:	71 e0       	ldi	r23, 0x01	; 1
		}
		else if (!strcmp((const char *)rxString, "ON_SEC+\n"))  // 'ON_SEC+' 명령 수신 시 ON 상태에서 타이머 초 증가
     530:	ce 01       	movw	r24, r28
     532:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strcmp>
     536:	89 2b       	or	r24, r25
     538:	61 f5       	brne	.+88     	; 0x592 <fan_UARTCtrl+0x14c>
     53a:	84 de       	rcall	.-760    	; 0x244 <fan_buzzer>
		{
			fan_buzzer();
     53c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <on_sec>
			
			on_sec = (on_sec + 1) % 60;  // ON 상태 타이머 초 증가
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	6c e3       	ldi	r22, 0x3C	; 60
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     54c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <on_sec>
     550:	79 d7       	rcall	.+3826   	; 0x1444 <LCD_displayClear>
			
			LCD_displayClear();
     552:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <on_sec>
			sprintf(buff, "ON Timer: %02d:%02d", on_min, on_sec);
     556:	1f 92       	push	r1
     558:	8f 93       	push	r24
     55a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <on_min>
     55e:	1f 92       	push	r1
     560:	8f 93       	push	r24
     562:	8b e4       	ldi	r24, 0x4B	; 75
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	8e ed       	ldi	r24, 0xDE	; 222
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     576:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(0, 0, buff);
     578:	51 e0       	ldi	r21, 0x01	; 1
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	59 d7       	rcall	.+3762   	; 0x1432 <LCD_writeStringXY>
     580:	8d b7       	in	r24, 0x3d	; 61
     582:	9e b7       	in	r25, 0x3e	; 62
     584:	08 96       	adiw	r24, 0x08	; 8
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	9e bf       	out	0x3e, r25	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	8d bf       	out	0x3d, r24	; 61
     590:	83 c0       	rjmp	.+262    	; 0x698 <fan_UARTCtrl+0x252>
     592:	68 e6       	ldi	r22, 0x68	; 104
     594:	71 e0       	ldi	r23, 0x01	; 1
			
		}
		else if (!strcmp((const char *)rxString, "OFF_MIN+\n"))  // 'OFF_MIN+' 명령 수신 시 OFF 상태에서 타이머 분 증가
     596:	ce 01       	movw	r24, r28
     598:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strcmp>
     59c:	89 2b       	or	r24, r25
     59e:	61 f5       	brne	.+88     	; 0x5f8 <fan_UARTCtrl+0x1b2>
     5a0:	51 de       	rcall	.-862    	; 0x244 <fan_buzzer>
		{
			fan_buzzer();
     5a2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <off_min>
			
			off_min = (off_min + 1) % 60;  // OFF 상태 타이머 분 증가
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	6c e3       	ldi	r22, 0x3C	; 60
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     5b2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <off_min>
     5b6:	46 d7       	rcall	.+3724   	; 0x1444 <LCD_displayClear>
			
			LCD_displayClear();
     5b8:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <off_sec>
			sprintf(buff, "OFF Timer: %02d:%02d", off_min, off_sec);
     5bc:	1f 92       	push	r1
     5be:	8f 93       	push	r24
     5c0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <off_min>
     5c4:	1f 92       	push	r1
     5c6:	8f 93       	push	r24
     5c8:	82 e7       	ldi	r24, 0x72	; 114
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	8e ed       	ldi	r24, 0xDE	; 222
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     5dc:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(0, 0, buff);
     5de:	51 e0       	ldi	r21, 0x01	; 1
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	26 d7       	rcall	.+3660   	; 0x1432 <LCD_writeStringXY>
     5e6:	8d b7       	in	r24, 0x3d	; 61
     5e8:	9e b7       	in	r25, 0x3e	; 62
     5ea:	08 96       	adiw	r24, 0x08	; 8
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	9e bf       	out	0x3e, r25	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	8d bf       	out	0x3d, r24	; 61
     5f6:	50 c0       	rjmp	.+160    	; 0x698 <fan_UARTCtrl+0x252>
     5f8:	67 e8       	ldi	r22, 0x87	; 135
		}
		else if (!strcmp((const char *)rxString, "OFF_SEC+\n"))  // 'OFF_SEC+' 명령 수신 시 OFF 상태에서 타이머 초 증가
     5fa:	71 e0       	ldi	r23, 0x01	; 1
     5fc:	ce 01       	movw	r24, r28
     5fe:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strcmp>
     602:	89 2b       	or	r24, r25
     604:	61 f5       	brne	.+88     	; 0x65e <fan_UARTCtrl+0x218>
		{
			fan_buzzer();
     606:	1e de       	rcall	.-964    	; 0x244 <fan_buzzer>
     608:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <off_sec>
			
			off_sec = (off_sec + 1) % 60;  // OFF 상태 타이머 초 증가
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	6c e3       	ldi	r22, 0x3C	; 60
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__divmodhi4>
     618:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <off_sec>
     61c:	13 d7       	rcall	.+3622   	; 0x1444 <LCD_displayClear>
			
			LCD_displayClear();
     61e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <off_sec>
			sprintf(buff, "OFF Timer: %02d:%02d", off_min, off_sec);
     622:	1f 92       	push	r1
     624:	8f 93       	push	r24
     626:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <off_min>
     62a:	1f 92       	push	r1
     62c:	8f 93       	push	r24
     62e:	82 e7       	ldi	r24, 0x72	; 114
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	8e ed       	ldi	r24, 0xDE	; 222
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     642:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(0, 0, buff);
     644:	51 e0       	ldi	r21, 0x01	; 1
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	f3 d6       	rcall	.+3558   	; 0x1432 <LCD_writeStringXY>
     64c:	8d b7       	in	r24, 0x3d	; 61
     64e:	9e b7       	in	r25, 0x3e	; 62
     650:	08 96       	adiw	r24, 0x08	; 8
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	9e bf       	out	0x3e, r25	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	8d bf       	out	0x3d, r24	; 61
     65c:	1d c0       	rjmp	.+58     	; 0x698 <fan_UARTCtrl+0x252>
		}
		else if (!strcmp((const char *)rxString, "Clock_Set\n"))  // 'Clock_Set' 명령 수신 시 카운트다운 시작
     65e:	61 e9       	ldi	r22, 0x91	; 145
     660:	71 e0       	ldi	r23, 0x01	; 1
     662:	ce 01       	movw	r24, r28
     664:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strcmp>
     668:	89 2b       	or	r24, r25
     66a:	b1 f4       	brne	.+44     	; 0x698 <fan_UARTCtrl+0x252>
		{
			Timer_reset();
     66c:	e1 de       	rcall	.-574    	; 0x430 <Timer_reset>
     66e:	ea dd       	rcall	.-1068   	; 0x244 <fan_buzzer>
			
			fan_buzzer();
     670:	e9 d6       	rcall	.+3538   	; 0x1444 <LCD_displayClear>
     672:	82 e1       	ldi	r24, 0x12	; 18
			
			LCD_displayClear();
     674:	ec e9       	ldi	r30, 0x9C	; 156
     676:	f1 e0       	ldi	r31, 0x01	; 1
			sprintf(buff, "Countdown Started");
     678:	ae ed       	ldi	r26, 0xDE	; 222
     67a:	b1 e0       	ldi	r27, 0x01	; 1
     67c:	01 90       	ld	r0, Z+
     67e:	0d 92       	st	X+, r0
     680:	8a 95       	dec	r24
     682:	e1 f7       	brne	.-8      	; 0x67c <fan_UARTCtrl+0x236>
     684:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(0, 0, buff);
     686:	51 e0       	ldi	r21, 0x01	; 1
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	d2 d6       	rcall	.+3492   	; 0x1432 <LCD_writeStringXY>
     68e:	4e ea       	ldi	r20, 0xAE	; 174
     690:	51 e0       	ldi	r21, 0x01	; 1
			LCD_writeStringXY(1, 0, "Timing...");
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	cd d6       	rcall	.+3482   	; 0x1432 <LCD_writeStringXY>
     698:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <on_sec>
     69c:	81 11       	cpse	r24, r1
			// 추가적으로 카운트다운 시작 로직을 여기에 작성
		}
	}
	
	if(((on_sec) || (on_min)) && (sec == on_sec) && (min == on_min))
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <fan_UARTCtrl+0x262>
     6a0:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <on_min>
     6a4:	99 23       	and	r25, r25
     6a6:	81 f0       	breq	.+32     	; 0x6c8 <fan_UARTCtrl+0x282>
     6a8:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <sec>
     6ac:	89 13       	cpse	r24, r25
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <fan_UARTCtrl+0x282>
     6b0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <min>
     6b4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <on_min>
     6b8:	98 13       	cpse	r25, r24
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <fan_UARTCtrl+0x282>
     6bc:	c3 dd       	rcall	.-1146   	; 0x244 <fan_buzzer>
	{
		fan_buzzer();
     6be:	7c dd       	rcall	.-1288   	; 0x1b8 <fan_normal>
     6c0:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <on_sec>
		
		fan_normal();
     6c4:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <on_min>
		
		on_sec = 0;
     6c8:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <off_sec>
		on_min = 0;
     6cc:	81 11       	cpse	r24, r1
	}
	if(((off_sec) || (off_min)) && (sec == off_sec) && (min == off_min))
     6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <fan_UARTCtrl+0x292>
     6d0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <off_min>
     6d4:	99 23       	and	r25, r25
     6d6:	81 f0       	breq	.+32     	; 0x6f8 <fan_UARTCtrl+0x2b2>
     6d8:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <sec>
     6dc:	89 13       	cpse	r24, r25
     6de:	0c c0       	rjmp	.+24     	; 0x6f8 <fan_UARTCtrl+0x2b2>
     6e0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <min>
     6e4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <off_min>
     6e8:	98 13       	cpse	r25, r24
     6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <fan_UARTCtrl+0x2b2>
     6ec:	ab dd       	rcall	.-1194   	; 0x244 <fan_buzzer>
	{
		fan_buzzer();
     6ee:	c6 d6       	rcall	.+3468   	; 0x147c <Motor_Off>
     6f0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <off_sec>
		
		Motor_Off();
     6f4:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <off_min>
		
		off_sec = 0;
     6f8:	df 91       	pop	r29
		off_min = 0;
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <MIN_SEC_RESET>:
	}
}
     6fe:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <tmin>
     702:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <tsec>
}

void MIN_SEC_RESET()
{
	tmin = 0;
	tsec = 0;
     706:	08 95       	ret

00000708 <TimerData_Set>:
}

void TimerData_Set()
{
	timerData = 0;
     708:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <timerData>
     70c:	08 95       	ret

0000070e <fan_buttonCtrl>:
		off_min = 0;
	}
}

void fan_buttonCtrl()
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
	switch(state)
     712:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <state>
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	09 f4       	brne	.+2      	; 0x71c <fan_buttonCtrl+0xe>
     71a:	a6 c1       	rjmp	.+844    	; 0xa68 <fan_buttonCtrl+0x35a>
     71c:	30 f4       	brcc	.+12     	; 0x72a <fan_buttonCtrl+0x1c>
     71e:	88 23       	and	r24, r24
     720:	69 f0       	breq	.+26     	; 0x73c <fan_buttonCtrl+0x2e>
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	09 f4       	brne	.+2      	; 0x728 <fan_buttonCtrl+0x1a>
     726:	89 c0       	rjmp	.+274    	; 0x83a <fan_buttonCtrl+0x12c>
     728:	19 c4       	rjmp	.+2098   	; 0xf5c <fan_buttonCtrl+0x84e>
     72a:	84 30       	cpi	r24, 0x04	; 4
     72c:	09 f4       	brne	.+2      	; 0x730 <fan_buttonCtrl+0x22>
     72e:	93 c2       	rjmp	.+1318   	; 0xc56 <fan_buttonCtrl+0x548>
     730:	08 f4       	brcc	.+2      	; 0x734 <fan_buttonCtrl+0x26>
     732:	12 c2       	rjmp	.+1060   	; 0xb58 <fan_buttonCtrl+0x44a>
     734:	85 30       	cpi	r24, 0x05	; 5
     736:	09 f4       	brne	.+2      	; 0x73a <fan_buttonCtrl+0x2c>
     738:	a1 c3       	rjmp	.+1858   	; 0xe7c <fan_buttonCtrl+0x76e>
     73a:	10 c4       	rjmp	.+2080   	; 0xf5c <fan_buttonCtrl+0x84e>
	{
		case OFF_SETTING :
		if(Button_GetState(&btnOnOff) == ACT_RELEASED)
     73c:	80 e1       	ldi	r24, 0x10	; 16
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	20 d4       	rcall	.+2112   	; 0xf82 <Button_GetState>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	19 f5       	brne	.+70     	; 0x78c <fan_buttonCtrl+0x7e>
		{
			fan_buzzer();
     746:	7e dd       	rcall	.-1284   	; 0x244 <fan_buzzer>
			fan_normal();
     748:	37 dd       	rcall	.-1426   	; 0x1b8 <fan_normal>
     74a:	7c d6       	rcall	.+3320   	; 0x1444 <LCD_displayClear>
			
			LCD_displayClear();
     74c:	87 e0       	ldi	r24, 0x07	; 7
     74e:	e8 eb       	ldi	r30, 0xB8	; 184
			sprintf(buff, "Fan On");
     750:	f1 e0       	ldi	r31, 0x01	; 1
     752:	ae ed       	ldi	r26, 0xDE	; 222
     754:	b1 e0       	ldi	r27, 0x01	; 1
     756:	01 90       	ld	r0, Z+
     758:	0d 92       	st	X+, r0
     75a:	8a 95       	dec	r24
     75c:	e1 f7       	brne	.-8      	; 0x756 <fan_buttonCtrl+0x48>
     75e:	4e ed       	ldi	r20, 0xDE	; 222
     760:	51 e0       	ldi	r21, 0x01	; 1
			LCD_writeStringXY(0, 0, buff);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	65 d6       	rcall	.+3274   	; 0x1432 <LCD_writeStringXY>
     768:	81 e1       	ldi	r24, 0x11	; 17
     76a:	e3 e1       	ldi	r30, 0x13	; 19
			sprintf(buff, "2:TIMER|3:NORMAL");
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	ae ed       	ldi	r26, 0xDE	; 222
     770:	b1 e0       	ldi	r27, 0x01	; 1
     772:	01 90       	ld	r0, Z+
     774:	0d 92       	st	X+, r0
     776:	8a 95       	dec	r24
     778:	e1 f7       	brne	.-8      	; 0x772 <fan_buttonCtrl+0x64>
     77a:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(1, 0, buff);
     77c:	51 e0       	ldi	r21, 0x01	; 1
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	57 d6       	rcall	.+3246   	; 0x1432 <LCD_writeStringXY>
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
			
			state = OFF_ON;
     78a:	e8 c3       	rjmp	.+2000   	; 0xf5c <fan_buttonCtrl+0x84e>
     78c:	87 e1       	ldi	r24, 0x17	; 23
		}
		else if(Button_GetState(&btnTimer) == ACT_RELEASED)
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	f8 d3       	rcall	.+2032   	; 0xf82 <Button_GetState>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	21 f5       	brne	.+72     	; 0x7de <fan_buttonCtrl+0xd0>
		{
			fan_buzzer();
     796:	56 dd       	rcall	.-1364   	; 0x244 <fan_buzzer>
     798:	71 d6       	rcall	.+3298   	; 0x147c <Motor_Off>
			Motor_Off();
     79a:	54 d6       	rcall	.+3240   	; 0x1444 <LCD_displayClear>
     79c:	8b e0       	ldi	r24, 0x0B	; 11
			
			LCD_displayClear();
     79e:	ef eb       	ldi	r30, 0xBF	; 191
     7a0:	f1 e0       	ldi	r31, 0x01	; 1
			sprintf(buff, "Timer Mode");
     7a2:	ae ed       	ldi	r26, 0xDE	; 222
     7a4:	b1 e0       	ldi	r27, 0x01	; 1
     7a6:	01 90       	ld	r0, Z+
     7a8:	0d 92       	st	X+, r0
     7aa:	8a 95       	dec	r24
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <fan_buttonCtrl+0x98>
     7ae:	4e ed       	ldi	r20, 0xDE	; 222
     7b0:	51 e0       	ldi	r21, 0x01	; 1
			LCD_writeStringXY(0, 0, buff);
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	3d d6       	rcall	.+3194   	; 0x1432 <LCD_writeStringXY>
     7b8:	8c e0       	ldi	r24, 0x0C	; 12
     7ba:	ea ec       	ldi	r30, 0xCA	; 202
     7bc:	f1 e0       	ldi	r31, 0x01	; 1
			sprintf(buff, "3:MIN|4:SEC");
     7be:	ae ed       	ldi	r26, 0xDE	; 222
     7c0:	b1 e0       	ldi	r27, 0x01	; 1
     7c2:	01 90       	ld	r0, Z+
     7c4:	0d 92       	st	X+, r0
     7c6:	8a 95       	dec	r24
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <fan_buttonCtrl+0xb4>
     7ca:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(1, 0, buff);
     7cc:	51 e0       	ldi	r21, 0x01	; 1
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	2f d6       	rcall	.+3166   	; 0x1432 <LCD_writeStringXY>
			
			state = OFF_TIMER;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
			
			MIN_SEC_RESET();
     7da:	91 df       	rcall	.-222    	; 0x6fe <MIN_SEC_RESET>
     7dc:	bf c3       	rjmp	.+1918   	; 0xf5c <fan_buttonCtrl+0x84e>
		}
		else if(Button_GetState(&btnNormal) == ACT_RELEASED)
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	cf d3       	rcall	.+1950   	; 0xf82 <Button_GetState>
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	19 f5       	brne	.+70     	; 0x82e <fan_buttonCtrl+0x120>
     7e8:	2d dd       	rcall	.-1446   	; 0x244 <fan_buzzer>
		{
			fan_buzzer();
     7ea:	48 d6       	rcall	.+3216   	; 0x147c <Motor_Off>
     7ec:	2b d6       	rcall	.+3158   	; 0x1444 <LCD_displayClear>
			Motor_Off();
     7ee:	8a e0       	ldi	r24, 0x0A	; 10
			
			LCD_displayClear();
     7f0:	e4 e2       	ldi	r30, 0x24	; 36
     7f2:	f1 e0       	ldi	r31, 0x01	; 1
			sprintf(buff, "Fan Speed");
     7f4:	ae ed       	ldi	r26, 0xDE	; 222
     7f6:	b1 e0       	ldi	r27, 0x01	; 1
     7f8:	01 90       	ld	r0, Z+
     7fa:	0d 92       	st	X+, r0
     7fc:	8a 95       	dec	r24
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <fan_buttonCtrl+0xea>
     800:	4e ed       	ldi	r20, 0xDE	; 222
     802:	51 e0       	ldi	r21, 0x01	; 1
     804:	60 e0       	ldi	r22, 0x00	; 0
			LCD_writeStringXY(0, 0, buff);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	14 d6       	rcall	.+3112   	; 0x1432 <LCD_writeStringXY>
     80a:	87 e0       	ldi	r24, 0x07	; 7
     80c:	e6 ed       	ldi	r30, 0xD6	; 214
     80e:	f1 e0       	ldi	r31, 0x01	; 1
			sprintf(buff, "4:NEXT");
     810:	ae ed       	ldi	r26, 0xDE	; 222
     812:	b1 e0       	ldi	r27, 0x01	; 1
     814:	01 90       	ld	r0, Z+
     816:	0d 92       	st	X+, r0
     818:	8a 95       	dec	r24
     81a:	e1 f7       	brne	.-8      	; 0x814 <fan_buttonCtrl+0x106>
     81c:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(1, 0, buff);
     81e:	51 e0       	ldi	r21, 0x01	; 1
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	06 d6       	rcall	.+3084   	; 0x1432 <LCD_writeStringXY>
			
			state = OFF_NORMAL;
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
     82c:	97 c3       	rjmp	.+1838   	; 0xf5c <fan_buttonCtrl+0x84e>
		}
		else
		{
			TimerData_Set();
     82e:	6c df       	rcall	.-296    	; 0x708 <TimerData_Set>
     830:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <timerData>
			FND_setFndData(timerData);
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	4c d5       	rcall	.+2712   	; 0x12d0 <FND_setFndData>
     838:	91 c3       	rjmp	.+1826   	; 0xf5c <fan_buttonCtrl+0x84e>
     83a:	80 e1       	ldi	r24, 0x10	; 16
     83c:	92 e0       	ldi	r25, 0x02	; 2
		}
		break;
		
		case OFF_TIMER :
		if(Button_GetState(&btnOnOff) == ACT_RELEASED)
     83e:	a1 d3       	rcall	.+1858   	; 0xf82 <Button_GetState>
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	91 f5       	brne	.+100    	; 0x8a8 <fan_buttonCtrl+0x19a>
     844:	ff dc       	rcall	.-1538   	; 0x244 <fan_buzzer>
     846:	1a d6       	rcall	.+3124   	; 0x147c <Motor_Off>
		{
			fan_buzzer();
     848:	f3 dd       	rcall	.-1050   	; 0x430 <Timer_reset>
     84a:	fc d5       	rcall	.+3064   	; 0x1444 <LCD_displayClear>
			Motor_Off();
     84c:	ce ed       	ldi	r28, 0xDE	; 222
     84e:	d1 e0       	ldi	r29, 0x01	; 1
			
			Timer_reset();
     850:	8b e0       	ldi	r24, 0x0B	; 11
     852:	ef eb       	ldi	r30, 0xBF	; 191
			
			LCD_displayClear();
     854:	f1 e0       	ldi	r31, 0x01	; 1
     856:	de 01       	movw	r26, r28
			sprintf(buff, "Timer Mode");
     858:	01 90       	ld	r0, Z+
     85a:	0d 92       	st	X+, r0
     85c:	8a 95       	dec	r24
     85e:	e1 f7       	brne	.-8      	; 0x858 <fan_buttonCtrl+0x14a>
     860:	ae 01       	movw	r20, r28
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	e5 d5       	rcall	.+3018   	; 0x1432 <LCD_writeStringXY>
     868:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
			LCD_writeStringXY(0, 0, buff);
     86c:	1f 92       	push	r1
     86e:	8f 93       	push	r24
     870:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
			sprintf(buff, "%02d:%02d", tmin, tsec);
     874:	1f 92       	push	r1
     876:	8f 93       	push	r24
     878:	8d e7       	ldi	r24, 0x7D	; 125
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	9f 93       	push	r25
     87e:	8f 93       	push	r24
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     888:	ae 01       	movw	r20, r28
     88a:	60 e0       	ldi	r22, 0x00	; 0
			LCD_writeStringXY(1, 0, buff);
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	d1 d5       	rcall	.+2978   	; 0x1432 <LCD_writeStringXY>
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
			
			state = OFF_ON;
     896:	8d b7       	in	r24, 0x3d	; 61
     898:	9e b7       	in	r25, 0x3e	; 62
     89a:	08 96       	adiw	r24, 0x08	; 8
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	9e bf       	out	0x3e, r25	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	8d bf       	out	0x3d, r24	; 61
     8a6:	5a c3       	rjmp	.+1716   	; 0xf5c <fan_buttonCtrl+0x84e>
     8a8:	87 e1       	ldi	r24, 0x17	; 23
     8aa:	92 e0       	ldi	r25, 0x02	; 2
		}
		else if(Button_GetState(&btnTimer) == ACT_RELEASED)
     8ac:	6a d3       	rcall	.+1748   	; 0xf82 <Button_GetState>
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	19 f5       	brne	.+70     	; 0x8f8 <fan_buttonCtrl+0x1ea>
     8b2:	c8 dc       	rcall	.-1648   	; 0x244 <fan_buzzer>
     8b4:	e3 d5       	rcall	.+3014   	; 0x147c <Motor_Off>
     8b6:	c6 d5       	rcall	.+2956   	; 0x1444 <LCD_displayClear>
		{
			fan_buzzer();
     8b8:	88 e0       	ldi	r24, 0x08	; 8
			Motor_Off();
     8ba:	eb e0       	ldi	r30, 0x0B	; 11
			
			LCD_displayClear();
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	ae ed       	ldi	r26, 0xDE	; 222
			sprintf(buff, "Fan Off");
     8c0:	b1 e0       	ldi	r27, 0x01	; 1
     8c2:	01 90       	ld	r0, Z+
     8c4:	0d 92       	st	X+, r0
     8c6:	8a 95       	dec	r24
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <fan_buttonCtrl+0x1b4>
     8ca:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(0, 0, buff);
     8cc:	51 e0       	ldi	r21, 0x01	; 1
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	af d5       	rcall	.+2910   	; 0x1432 <LCD_writeStringXY>
     8d4:	81 e1       	ldi	r24, 0x11	; 17
     8d6:	e3 e1       	ldi	r30, 0x13	; 19
			sprintf(buff, "2:TIMER|3:NORMAL");
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	ae ed       	ldi	r26, 0xDE	; 222
     8dc:	b1 e0       	ldi	r27, 0x01	; 1
     8de:	01 90       	ld	r0, Z+
     8e0:	0d 92       	st	X+, r0
     8e2:	8a 95       	dec	r24
     8e4:	e1 f7       	brne	.-8      	; 0x8de <fan_buttonCtrl+0x1d0>
     8e6:	4e ed       	ldi	r20, 0xDE	; 222
			LCD_writeStringXY(1, 0, buff);
     8e8:	51 e0       	ldi	r21, 0x01	; 1
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	a1 d5       	rcall	.+2882   	; 0x1432 <LCD_writeStringXY>
     8f0:	06 df       	rcall	.-500    	; 0x6fe <MIN_SEC_RESET>
     8f2:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <state>
			
			MIN_SEC_RESET();
     8f6:	32 c3       	rjmp	.+1636   	; 0xf5c <fan_buttonCtrl+0x84e>
			
			state = OFF_SETTING;
     8f8:	8a e0       	ldi	r24, 0x0A	; 10
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	42 d3       	rcall	.+1668   	; 0xf82 <Button_GetState>
		}
		else if(Button_GetState(&btnMin) == ACT_RELEASED)
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	79 f5       	brne	.+94     	; 0x960 <fan_buttonCtrl+0x252>
     902:	a0 dc       	rcall	.-1728   	; 0x244 <fan_buzzer>
     904:	bb d5       	rcall	.+2934   	; 0x147c <Motor_Off>
     906:	2e dc       	rcall	.-1956   	; 0x164 <fan_setTimerMin>
     908:	9d d5       	rcall	.+2874   	; 0x1444 <LCD_displayClear>
		{
			fan_buzzer();
     90a:	ce ed       	ldi	r28, 0xDE	; 222
			Motor_Off();
     90c:	d1 e0       	ldi	r29, 0x01	; 1
     90e:	8b e0       	ldi	r24, 0x0B	; 11
			
			fan_setTimerMin();
     910:	ef eb       	ldi	r30, 0xBF	; 191
     912:	f1 e0       	ldi	r31, 0x01	; 1
			
			LCD_displayClear();
     914:	de 01       	movw	r26, r28
     916:	01 90       	ld	r0, Z+
			sprintf(buff, "Timer Mode");
     918:	0d 92       	st	X+, r0
     91a:	8a 95       	dec	r24
     91c:	e1 f7       	brne	.-8      	; 0x916 <fan_buttonCtrl+0x208>
     91e:	ae 01       	movw	r20, r28
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	86 d5       	rcall	.+2828   	; 0x1432 <LCD_writeStringXY>
     926:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
			LCD_writeStringXY(0, 0, buff);
     92a:	1f 92       	push	r1
     92c:	8f 93       	push	r24
			sprintf(buff, "%02d:%02d", tmin, tsec);
     92e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
     932:	1f 92       	push	r1
     934:	8f 93       	push	r24
     936:	8d e7       	ldi	r24, 0x7D	; 125
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     946:	ae 01       	movw	r20, r28
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	81 e0       	ldi	r24, 0x01	; 1
			LCD_writeStringXY(1, 0, buff);
     94c:	72 d5       	rcall	.+2788   	; 0x1432 <LCD_writeStringXY>
     94e:	8d b7       	in	r24, 0x3d	; 61
     950:	9e b7       	in	r25, 0x3e	; 62
     952:	08 96       	adiw	r24, 0x08	; 8
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	9e bf       	out	0x3e, r25	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	8d bf       	out	0x3d, r24	; 61
     95e:	fe c2       	rjmp	.+1532   	; 0xf5c <fan_buttonCtrl+0x84e>
     960:	88 ef       	ldi	r24, 0xF8	; 248
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e d3       	rcall	.+1564   	; 0xf82 <Button_GetState>
     966:	81 30       	cpi	r24, 0x01	; 1
		}
		else if(Button_GetState(&btnSec) == ACT_RELEASED)
     968:	79 f5       	brne	.+94     	; 0x9c8 <fan_buttonCtrl+0x2ba>
     96a:	6c dc       	rcall	.-1832   	; 0x244 <fan_buzzer>
     96c:	87 d5       	rcall	.+2830   	; 0x147c <Motor_Off>
     96e:	0f dc       	rcall	.-2018   	; 0x18e <fan_setTimerSec>
     970:	69 d5       	rcall	.+2770   	; 0x1444 <LCD_displayClear>
		{
			fan_buzzer();
     972:	ce ed       	ldi	r28, 0xDE	; 222
     974:	d1 e0       	ldi	r29, 0x01	; 1
			Motor_Off();
     976:	8b e0       	ldi	r24, 0x0B	; 11
     978:	ef eb       	ldi	r30, 0xBF	; 191
			
			fan_setTimerSec();
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	de 01       	movw	r26, r28
			
			LCD_displayClear();
     97e:	01 90       	ld	r0, Z+
     980:	0d 92       	st	X+, r0
			sprintf(buff, "Timer Mode");
     982:	8a 95       	dec	r24
     984:	e1 f7       	brne	.-8      	; 0x97e <fan_buttonCtrl+0x270>
     986:	ae 01       	movw	r20, r28
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	52 d5       	rcall	.+2724   	; 0x1432 <LCD_writeStringXY>
     98e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
     992:	1f 92       	push	r1
			LCD_writeStringXY(0, 0, buff);
     994:	8f 93       	push	r24
     996:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
     99a:	1f 92       	push	r1
			sprintf(buff, "%02d:%02d", tmin, tsec);
     99c:	8f 93       	push	r24
     99e:	8d e7       	ldi	r24, 0x7D	; 125
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     9ae:	ae 01       	movw	r20, r28
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	3e d5       	rcall	.+2684   	; 0x1432 <LCD_writeStringXY>
     9b6:	8d b7       	in	r24, 0x3d	; 61
     9b8:	9e b7       	in	r25, 0x3e	; 62
			LCD_writeStringXY(1, 0, buff);
     9ba:	08 96       	adiw	r24, 0x08	; 8
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	9e bf       	out	0x3e, r25	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	8d bf       	out	0x3d, r24	; 61
     9c6:	ca c2       	rjmp	.+1428   	; 0xf5c <fan_buttonCtrl+0x84e>
     9c8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <min>
     9cc:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
     9d0:	98 13       	cpse	r25, r24
     9d2:	28 c0       	rjmp	.+80     	; 0xa24 <fan_buttonCtrl+0x316>
		}
		else
		{
			if((min == tmin) && (sec == tsec))
     9d4:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <sec>
     9d8:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
     9dc:	98 13       	cpse	r25, r24
     9de:	22 c0       	rjmp	.+68     	; 0xa24 <fan_buttonCtrl+0x316>
     9e0:	31 dc       	rcall	.-1950   	; 0x244 <fan_buzzer>
     9e2:	ea db       	rcall	.-2092   	; 0x1b8 <fan_normal>
     9e4:	2f d5       	rcall	.+2654   	; 0x1444 <LCD_displayClear>
     9e6:	87 e0       	ldi	r24, 0x07	; 7
     9e8:	e8 eb       	ldi	r30, 0xB8	; 184
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
			{
				fan_buzzer();
     9ec:	ae ed       	ldi	r26, 0xDE	; 222
     9ee:	b1 e0       	ldi	r27, 0x01	; 1
				
				fan_normal();
     9f0:	01 90       	ld	r0, Z+
     9f2:	0d 92       	st	X+, r0
				
				LCD_displayClear();
     9f4:	8a 95       	dec	r24
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <fan_buttonCtrl+0x2e2>
				sprintf(buff, "Fan On");
     9f8:	4e ed       	ldi	r20, 0xDE	; 222
     9fa:	51 e0       	ldi	r21, 0x01	; 1
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	18 d5       	rcall	.+2608   	; 0x1432 <LCD_writeStringXY>
     a02:	81 e1       	ldi	r24, 0x11	; 17
     a04:	e3 e1       	ldi	r30, 0x13	; 19
     a06:	f1 e0       	ldi	r31, 0x01	; 1
     a08:	ae ed       	ldi	r26, 0xDE	; 222
				LCD_writeStringXY(0, 0, buff);
     a0a:	b1 e0       	ldi	r27, 0x01	; 1
     a0c:	01 90       	ld	r0, Z+
     a0e:	0d 92       	st	X+, r0
     a10:	8a 95       	dec	r24
     a12:	e1 f7       	brne	.-8      	; 0xa0c <fan_buttonCtrl+0x2fe>
				sprintf(buff, "2:TIMER|3:NORMAL");
     a14:	4e ed       	ldi	r20, 0xDE	; 222
     a16:	51 e0       	ldi	r21, 0x01	; 1
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	0a d5       	rcall	.+2580   	; 0x1432 <LCD_writeStringXY>
				LCD_writeStringXY(1, 0, buff);
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
     a24:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <min>
     a28:	99 e8       	ldi	r25, 0x89	; 137
				
				state = OFF_ON;
     a2a:	89 9f       	mul	r24, r25
     a2c:	21 2d       	mov	r18, r1
     a2e:	11 24       	eor	r1, r1
			}
			timerData = ((min%60)*100) + (sec%60);
     a30:	22 95       	swap	r18
     a32:	26 95       	lsr	r18
     a34:	27 70       	andi	r18, 0x07	; 7
     a36:	3c e3       	ldi	r19, 0x3C	; 60
     a38:	23 9f       	mul	r18, r19
     a3a:	80 19       	sub	r24, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	28 2f       	mov	r18, r24
     a40:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <sec>
     a44:	89 9f       	mul	r24, r25
     a46:	91 2d       	mov	r25, r1
     a48:	11 24       	eor	r1, r1
     a4a:	92 95       	swap	r25
     a4c:	96 95       	lsr	r25
     a4e:	97 70       	andi	r25, 0x07	; 7
     a50:	93 9f       	mul	r25, r19
     a52:	80 19       	sub	r24, r0
     a54:	11 24       	eor	r1, r1
     a56:	94 e6       	ldi	r25, 0x64	; 100
     a58:	29 9f       	mul	r18, r25
     a5a:	80 0d       	add	r24, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <timerData>
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	35 d4       	rcall	.+2154   	; 0x12d0 <FND_setFndData>
     a66:	7a c2       	rjmp	.+1268   	; 0xf5c <fan_buttonCtrl+0x84e>
     a68:	80 e1       	ldi	r24, 0x10	; 16
			FND_setFndData(timerData);
     a6a:	92 e0       	ldi	r25, 0x02	; 2
     a6c:	8a d2       	rcall	.+1300   	; 0xf82 <Button_GetState>
     a6e:	81 30       	cpi	r24, 0x01	; 1
		}
		break;
		
		case OFF_NORMAL :
		if(Button_GetState(&btnOnOff) == ACT_RELEASED)
     a70:	59 f5       	brne	.+86     	; 0xac8 <fan_buttonCtrl+0x3ba>
     a72:	e8 db       	rcall	.-2096   	; 0x244 <fan_buzzer>
     a74:	a1 db       	rcall	.-2238   	; 0x1b8 <fan_normal>
     a76:	e6 d4       	rcall	.+2508   	; 0x1444 <LCD_displayClear>
     a78:	ce ed       	ldi	r28, 0xDE	; 222
		{
			fan_buzzer();
     a7a:	d1 e0       	ldi	r29, 0x01	; 1
     a7c:	87 e0       	ldi	r24, 0x07	; 7
			fan_normal();
     a7e:	e8 eb       	ldi	r30, 0xB8	; 184
     a80:	f1 e0       	ldi	r31, 0x01	; 1
			
			LCD_displayClear();
     a82:	de 01       	movw	r26, r28
     a84:	01 90       	ld	r0, Z+
			sprintf(buff, "Fan On");
     a86:	0d 92       	st	X+, r0
     a88:	8a 95       	dec	r24
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <fan_buttonCtrl+0x376>
     a8c:	ae 01       	movw	r20, r28
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	cf d4       	rcall	.+2462   	; 0x1432 <LCD_writeStringXY>
     a94:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <normalState>
			LCD_writeStringXY(0, 0, buff);
     a98:	1f 92       	push	r1
     a9a:	8f 93       	push	r24
     a9c:	8e e2       	ldi	r24, 0x2E	; 46
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	9f 93       	push	r25
			sprintf(buff, "%d", normalState);
     aa2:	8f 93       	push	r24
     aa4:	df 93       	push	r29
     aa6:	cf 93       	push	r28
     aa8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>
     aac:	ae 01       	movw	r20, r28
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	bf d4       	rcall	.+2430   	; 0x1432 <LCD_writeStringXY>
     ab4:	83 e0       	ldi	r24, 0x03	; 3
			LCD_writeStringXY(1, 0, buff);
     ab6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
			
			state = OFF_ON;
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	4a c2       	rjmp	.+1172   	; 0xf5c <fan_buttonCtrl+0x84e>
     ac8:	84 e0       	ldi	r24, 0x04	; 4
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	5a d2       	rcall	.+1204   	; 0xf82 <Button_GetState>
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	11 f5       	brne	.+68     	; 0xb16 <fan_buttonCtrl+0x408>
		}
		else if(Button_GetState(&btnNormal) == ACT_RELEASED)
     ad2:	b8 db       	rcall	.-2192   	; 0x244 <fan_buzzer>
     ad4:	d3 d4       	rcall	.+2470   	; 0x147c <Motor_Off>
     ad6:	b6 d4       	rcall	.+2412   	; 0x1444 <LCD_displayClear>
     ad8:	88 e0       	ldi	r24, 0x08	; 8
     ada:	eb e0       	ldi	r30, 0x0B	; 11
		{
			fan_buzzer();
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	ae ed       	ldi	r26, 0xDE	; 222
			Motor_Off();
     ae0:	b1 e0       	ldi	r27, 0x01	; 1
			
			LCD_displayClear();
     ae2:	01 90       	ld	r0, Z+
     ae4:	0d 92       	st	X+, r0
			sprintf(buff, "Fan Off");
     ae6:	8a 95       	dec	r24
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <fan_buttonCtrl+0x3d4>
     aea:	4e ed       	ldi	r20, 0xDE	; 222
     aec:	51 e0       	ldi	r21, 0x01	; 1
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	80 e0       	ldi	r24, 0x00	; 0
			LCD_writeStringXY(0, 0, buff);
     af2:	9f d4       	rcall	.+2366   	; 0x1432 <LCD_writeStringXY>
     af4:	81 e1       	ldi	r24, 0x11	; 17
     af6:	e3 e1       	ldi	r30, 0x13	; 19
     af8:	f1 e0       	ldi	r31, 0x01	; 1
     afa:	ae ed       	ldi	r26, 0xDE	; 222
     afc:	b1 e0       	ldi	r27, 0x01	; 1
			sprintf(buff, "2:TIMER|3:NORMAL");
     afe:	01 90       	ld	r0, Z+
     b00:	0d 92       	st	X+, r0
     b02:	8a 95       	dec	r24
     b04:	e1 f7       	brne	.-8      	; 0xafe <fan_buttonCtrl+0x3f0>
     b06:	4e ed       	ldi	r20, 0xDE	; 222
     b08:	51 e0       	ldi	r21, 0x01	; 1
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	81 e0       	ldi	r24, 0x01	; 1
			LCD_writeStringXY(1, 0, buff);
     b0e:	91 d4       	rcall	.+2338   	; 0x1432 <LCD_writeStringXY>
     b10:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <state>
     b14:	23 c2       	rjmp	.+1094   	; 0xf5c <fan_buttonCtrl+0x84e>
     b16:	82 e2       	ldi	r24, 0x22	; 34
     b18:	92 e0       	ldi	r25, 0x02	; 2
			
			state = OFF_SETTING;
     b1a:	33 d2       	rcall	.+1126   	; 0xf82 <Button_GetState>
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	b1 f4       	brne	.+44     	; 0xb4c <fan_buttonCtrl+0x43e>
		}
		else if(Button_GetState(&btnNext) == ACT_RELEASED)
     b20:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <normalState>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	49 f0       	breq	.+18     	; 0xb3a <fan_buttonCtrl+0x42c>
     b28:	18 f0       	brcs	.+6      	; 0xb30 <fan_buttonCtrl+0x422>
		{
			switch(normalState)
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	59 f0       	breq	.+22     	; 0xb44 <fan_buttonCtrl+0x436>
     b2e:	16 c2       	rjmp	.+1068   	; 0xf5c <fan_buttonCtrl+0x84e>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <normalState>
			{
				case MODE1 :
				normalState = MODE2;
     b36:	4c dc       	rcall	.-1896   	; 0x3d0 <fan_Motor_Off>
     b38:	11 c2       	rjmp	.+1058   	; 0xf5c <fan_buttonCtrl+0x84e>
				fan_Motor_Off();
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <normalState>
				break;
				
				case MODE2 :
				normalState = MODE3;
     b40:	47 dc       	rcall	.-1906   	; 0x3d0 <fan_Motor_Off>
     b42:	0c c2       	rjmp	.+1048   	; 0xf5c <fan_buttonCtrl+0x84e>
     b44:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <normalState>
				fan_Motor_Off();
     b48:	43 dc       	rcall	.-1914   	; 0x3d0 <fan_Motor_Off>
				break;
     b4a:	08 c2       	rjmp	.+1040   	; 0xf5c <fan_buttonCtrl+0x84e>
				
				case MODE3 :
				normalState = MODE1;
     b4c:	dd dd       	rcall	.-1094   	; 0x708 <TimerData_Set>
				fan_Motor_Off();
     b4e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <timerData>
				break;
     b52:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		else
		{
			TimerData_Set();
     b54:	bd d3       	rcall	.+1914   	; 0x12d0 <FND_setFndData>
     b56:	02 c2       	rjmp	.+1028   	; 0xf5c <fan_buttonCtrl+0x84e>
			FND_setFndData(timerData);
     b58:	80 e1       	ldi	r24, 0x10	; 16
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	12 d2       	rcall	.+1060   	; 0xf82 <Button_GetState>
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	11 f5       	brne	.+68     	; 0xba6 <fan_buttonCtrl+0x498>
     b62:	70 db       	rcall	.-2336   	; 0x244 <fan_buzzer>
		}
		break;
		
		case OFF_ON :
		if(Button_GetState(&btnOnOff) == ACT_RELEASED)
     b64:	8b d4       	rcall	.+2326   	; 0x147c <Motor_Off>
     b66:	6e d4       	rcall	.+2268   	; 0x1444 <LCD_displayClear>
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	eb e0       	ldi	r30, 0x0B	; 11
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
		{
			fan_buzzer();
     b6e:	ae ed       	ldi	r26, 0xDE	; 222
     b70:	b1 e0       	ldi	r27, 0x01	; 1
			Motor_Off();
     b72:	01 90       	ld	r0, Z+
			
			LCD_displayClear();
     b74:	0d 92       	st	X+, r0
     b76:	8a 95       	dec	r24
			sprintf(buff, "Fan Off");
     b78:	e1 f7       	brne	.-8      	; 0xb72 <fan_buttonCtrl+0x464>
     b7a:	4e ed       	ldi	r20, 0xDE	; 222
     b7c:	51 e0       	ldi	r21, 0x01	; 1
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	57 d4       	rcall	.+2222   	; 0x1432 <LCD_writeStringXY>
			LCD_writeStringXY(0, 0, buff);
     b84:	81 e1       	ldi	r24, 0x11	; 17
     b86:	e3 e1       	ldi	r30, 0x13	; 19
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	ae ed       	ldi	r26, 0xDE	; 222
     b8c:	b1 e0       	ldi	r27, 0x01	; 1
     b8e:	01 90       	ld	r0, Z+
			sprintf(buff, "2:TIMER|3:NORMAL");
     b90:	0d 92       	st	X+, r0
     b92:	8a 95       	dec	r24
     b94:	e1 f7       	brne	.-8      	; 0xb8e <fan_buttonCtrl+0x480>
     b96:	4e ed       	ldi	r20, 0xDE	; 222
     b98:	51 e0       	ldi	r21, 0x01	; 1
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	49 d4       	rcall	.+2194   	; 0x1432 <LCD_writeStringXY>
			LCD_writeStringXY(1, 0, buff);
     ba0:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <state>
     ba4:	db c1       	rjmp	.+950    	; 0xf5c <fan_buttonCtrl+0x84e>
     ba6:	87 e1       	ldi	r24, 0x17	; 23
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	eb d1       	rcall	.+982    	; 0xf82 <Button_GetState>
			
			state = OFF_SETTING;
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	21 f5       	brne	.+72     	; 0xbf8 <fan_buttonCtrl+0x4ea>
		}
		else if(Button_GetState(&btnTimer) == ACT_RELEASED)
     bb0:	49 db       	rcall	.-2414   	; 0x244 <fan_buzzer>
     bb2:	02 db       	rcall	.-2556   	; 0x1b8 <fan_normal>
     bb4:	47 d4       	rcall	.+2190   	; 0x1444 <LCD_displayClear>
     bb6:	8b e0       	ldi	r24, 0x0B	; 11
     bb8:	ef eb       	ldi	r30, 0xBF	; 191
		{
			fan_buzzer();
     bba:	f1 e0       	ldi	r31, 0x01	; 1
			fan_normal();
     bbc:	ae ed       	ldi	r26, 0xDE	; 222
     bbe:	b1 e0       	ldi	r27, 0x01	; 1
			
			LCD_displayClear();
     bc0:	01 90       	ld	r0, Z+
			sprintf(buff, "Timer Mode");
     bc2:	0d 92       	st	X+, r0
     bc4:	8a 95       	dec	r24
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <fan_buttonCtrl+0x4b2>
     bc8:	4e ed       	ldi	r20, 0xDE	; 222
     bca:	51 e0       	ldi	r21, 0x01	; 1
			LCD_writeStringXY(0, 0, buff);
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	30 d4       	rcall	.+2144   	; 0x1432 <LCD_writeStringXY>
     bd2:	8c e0       	ldi	r24, 0x0C	; 12
     bd4:	ea ec       	ldi	r30, 0xCA	; 202
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
			sprintf(buff, "3:MIN|4:SEC");
     bd8:	ae ed       	ldi	r26, 0xDE	; 222
     bda:	b1 e0       	ldi	r27, 0x01	; 1
     bdc:	01 90       	ld	r0, Z+
     bde:	0d 92       	st	X+, r0
     be0:	8a 95       	dec	r24
     be2:	e1 f7       	brne	.-8      	; 0xbdc <fan_buttonCtrl+0x4ce>
     be4:	4e ed       	ldi	r20, 0xDE	; 222
     be6:	51 e0       	ldi	r21, 0x01	; 1
			LCD_writeStringXY(1, 0, buff);
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	22 d4       	rcall	.+2116   	; 0x1432 <LCD_writeStringXY>
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
			
			state = ON_TIMER;
     bf4:	84 dd       	rcall	.-1272   	; 0x6fe <MIN_SEC_RESET>
     bf6:	b2 c1       	rjmp	.+868    	; 0xf5c <fan_buttonCtrl+0x84e>
     bf8:	84 e0       	ldi	r24, 0x04	; 4
			
			MIN_SEC_RESET();
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	c2 d1       	rcall	.+900    	; 0xf82 <Button_GetState>
		}
		else if(Button_GetState(&btnNormal) == ACT_RELEASED)
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	19 f5       	brne	.+70     	; 0xc48 <fan_buttonCtrl+0x53a>
     c02:	20 db       	rcall	.-2496   	; 0x244 <fan_buzzer>
     c04:	d9 da       	rcall	.-2638   	; 0x1b8 <fan_normal>
     c06:	1e d4       	rcall	.+2108   	; 0x1444 <LCD_displayClear>
		{
			fan_buzzer();
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	e4 e2       	ldi	r30, 0x24	; 36
			fan_normal();
     c0c:	f1 e0       	ldi	r31, 0x01	; 1
     c0e:	ae ed       	ldi	r26, 0xDE	; 222
			
			LCD_displayClear();
     c10:	b1 e0       	ldi	r27, 0x01	; 1
     c12:	01 90       	ld	r0, Z+
			sprintf(buff, "Fan Speed");
     c14:	0d 92       	st	X+, r0
     c16:	8a 95       	dec	r24
     c18:	e1 f7       	brne	.-8      	; 0xc12 <fan_buttonCtrl+0x504>
     c1a:	4e ed       	ldi	r20, 0xDE	; 222
     c1c:	51 e0       	ldi	r21, 0x01	; 1
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	07 d4       	rcall	.+2062   	; 0x1432 <LCD_writeStringXY>
			LCD_writeStringXY(0, 0, buff);
     c24:	87 e0       	ldi	r24, 0x07	; 7
     c26:	e6 ed       	ldi	r30, 0xD6	; 214
     c28:	f1 e0       	ldi	r31, 0x01	; 1
     c2a:	ae ed       	ldi	r26, 0xDE	; 222
			sprintf(buff, "4:NEXT");
     c2c:	b1 e0       	ldi	r27, 0x01	; 1
     c2e:	01 90       	ld	r0, Z+
     c30:	0d 92       	st	X+, r0
     c32:	8a 95       	dec	r24
     c34:	e1 f7       	brne	.-8      	; 0xc2e <fan_buttonCtrl+0x520>
     c36:	4e ed       	ldi	r20, 0xDE	; 222
     c38:	51 e0       	ldi	r21, 0x01	; 1
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
			LCD_writeStringXY(1, 0, buff);
     c3e:	f9 d3       	rcall	.+2034   	; 0x1432 <LCD_writeStringXY>
     c40:	85 e0       	ldi	r24, 0x05	; 5
     c42:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
     c46:	8a c1       	rjmp	.+788    	; 0xf5c <fan_buttonCtrl+0x84e>
			
			state = ON_NORMAL;
     c48:	5f dd       	rcall	.-1346   	; 0x708 <TimerData_Set>
     c4a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <timerData>
     c4e:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		{
			TimerData_Set();
     c50:	3f d3       	rcall	.+1662   	; 0x12d0 <FND_setFndData>
     c52:	d2 da       	rcall	.-2652   	; 0x1f8 <Motor_Safety>
			FND_setFndData(timerData);
     c54:	83 c1       	rjmp	.+774    	; 0xf5c <fan_buttonCtrl+0x84e>
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	93 d1       	rcall	.+806    	; 0xf82 <Button_GetState>
			Motor_Safety();
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	81 f5       	brne	.+96     	; 0xcc0 <fan_buttonCtrl+0x5b2>
		}
		break;
		
		case ON_TIMER :
		if(Button_GetState(&btnOnOff) == ACT_RELEASED)
     c60:	f1 da       	rcall	.-2590   	; 0x244 <fan_buzzer>
     c62:	aa da       	rcall	.-2732   	; 0x1b8 <fan_normal>
     c64:	e5 db       	rcall	.-2102   	; 0x430 <Timer_reset>
     c66:	ee d3       	rcall	.+2012   	; 0x1444 <LCD_displayClear>
     c68:	ce ed       	ldi	r28, 0xDE	; 222
		{
			fan_buzzer();
     c6a:	d1 e0       	ldi	r29, 0x01	; 1
			fan_normal();
     c6c:	8b e0       	ldi	r24, 0x0B	; 11
			
			Timer_reset();
     c6e:	ef eb       	ldi	r30, 0xBF	; 191
     c70:	f1 e0       	ldi	r31, 0x01	; 1
			
			LCD_displayClear();
     c72:	de 01       	movw	r26, r28
     c74:	01 90       	ld	r0, Z+
			sprintf(buff, "Timer Mode");
     c76:	0d 92       	st	X+, r0
     c78:	8a 95       	dec	r24
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <fan_buttonCtrl+0x566>
     c7c:	ae 01       	movw	r20, r28
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	d7 d3       	rcall	.+1966   	; 0x1432 <LCD_writeStringXY>
     c84:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
			LCD_writeStringXY(0, 0, buff);
     c88:	1f 92       	push	r1
     c8a:	8f 93       	push	r24
     c8c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
     c90:	1f 92       	push	r1
			sprintf(buff, "%02d:%02d", tmin, tsec);
     c92:	8f 93       	push	r24
     c94:	8d e7       	ldi	r24, 0x7D	; 125
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	46 d7       	rcall	.+3724   	; 0x1b2e <sprintf>
     ca2:	ae 01       	movw	r20, r28
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	c4 d3       	rcall	.+1928   	; 0x1432 <LCD_writeStringXY>
     caa:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <state>
			LCD_writeStringXY(1, 0, buff);
     cae:	8d b7       	in	r24, 0x3d	; 61
     cb0:	9e b7       	in	r25, 0x3e	; 62
     cb2:	08 96       	adiw	r24, 0x08	; 8
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
			
			state = OFF_SETTING;
     cb8:	9e bf       	out	0x3e, r25	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	8d bf       	out	0x3d, r24	; 61
     cbe:	4e c1       	rjmp	.+668    	; 0xf5c <fan_buttonCtrl+0x84e>
     cc0:	87 e1       	ldi	r24, 0x17	; 23
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	5e d1       	rcall	.+700    	; 0xf82 <Button_GetState>
     cc6:	81 30       	cpi	r24, 0x01	; 1
		}
		else if(Button_GetState(&btnTimer) == ACT_RELEASED)
     cc8:	21 f5       	brne	.+72     	; 0xd12 <fan_buttonCtrl+0x604>
     cca:	bc da       	rcall	.-2696   	; 0x244 <fan_buzzer>
     ccc:	75 da       	rcall	.-2838   	; 0x1b8 <fan_normal>
     cce:	ba d3       	rcall	.+1908   	; 0x1444 <LCD_displayClear>
     cd0:	87 e0       	ldi	r24, 0x07	; 7
     cd2:	e8 eb       	ldi	r30, 0xB8	; 184
		{
			fan_buzzer();
     cd4:	f1 e0       	ldi	r31, 0x01	; 1
     cd6:	ae ed       	ldi	r26, 0xDE	; 222
			fan_normal();
     cd8:	b1 e0       	ldi	r27, 0x01	; 1
     cda:	01 90       	ld	r0, Z+
			
			LCD_displayClear();
     cdc:	0d 92       	st	X+, r0
     cde:	8a 95       	dec	r24
			sprintf(buff, "Fan On");
     ce0:	e1 f7       	brne	.-8      	; 0xcda <fan_buttonCtrl+0x5cc>
     ce2:	4e ed       	ldi	r20, 0xDE	; 222
     ce4:	51 e0       	ldi	r21, 0x01	; 1
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	a3 d3       	rcall	.+1862   	; 0x1432 <LCD_writeStringXY>
     cec:	81 e1       	ldi	r24, 0x11	; 17
     cee:	e3 e1       	ldi	r30, 0x13	; 19
			LCD_writeStringXY(0, 0, buff);
     cf0:	f1 e0       	ldi	r31, 0x01	; 1
     cf2:	ae ed       	ldi	r26, 0xDE	; 222
     cf4:	b1 e0       	ldi	r27, 0x01	; 1
     cf6:	01 90       	ld	r0, Z+
     cf8:	0d 92       	st	X+, r0
     cfa:	8a 95       	dec	r24
			sprintf(buff, "2:TIMER|3:NORMAL");
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <fan_buttonCtrl+0x5e8>
     cfe:	4e ed       	ldi	r20, 0xDE	; 222
     d00:	51 e0       	ldi	r21, 0x01	; 1
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	95 d3       	rcall	.+1834   	; 0x1432 <LCD_writeStringXY>
     d08:	83 e0       	ldi	r24, 0x03	; 3
			LCD_writeStringXY(1, 0, buff);
     d0a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
     d0e:	f7 dc       	rcall	.-1554   	; 0x6fe <MIN_SEC_RESET>
     d10:	25 c1       	rjmp	.+586    	; 0xf5c <fan_buttonCtrl+0x84e>
     d12:	8a e0       	ldi	r24, 0x0A	; 10
     d14:	92 e0       	ldi	r25, 0x02	; 2
			
			state = OFF_ON;
     d16:	35 d1       	rcall	.+618    	; 0xf82 <Button_GetState>
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	71 f5       	brne	.+92     	; 0xd78 <fan_buttonCtrl+0x66a>
			
			MIN_SEC_RESET();
     d1c:	93 da       	rcall	.-2778   	; 0x244 <fan_buzzer>
     d1e:	4c da       	rcall	.-2920   	; 0x1b8 <fan_normal>
     d20:	21 da       	rcall	.-3006   	; 0x164 <fan_setTimerMin>
		}
		else if(Button_GetState(&btnMin) == ACT_RELEASED)
     d22:	90 d3       	rcall	.+1824   	; 0x1444 <LCD_displayClear>
     d24:	ce ed       	ldi	r28, 0xDE	; 222
     d26:	d1 e0       	ldi	r29, 0x01	; 1
     d28:	8b e0       	ldi	r24, 0x0B	; 11
     d2a:	ef eb       	ldi	r30, 0xBF	; 191
		{
			fan_buzzer();
     d2c:	f1 e0       	ldi	r31, 0x01	; 1
			fan_normal();
     d2e:	de 01       	movw	r26, r28
     d30:	01 90       	ld	r0, Z+
			
			fan_setTimerMin();
     d32:	0d 92       	st	X+, r0
     d34:	8a 95       	dec	r24
			
			LCD_displayClear();
     d36:	e1 f7       	brne	.-8      	; 0xd30 <fan_buttonCtrl+0x622>
     d38:	ae 01       	movw	r20, r28
			sprintf(buff, "Timer Mode");
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	79 d3       	rcall	.+1778   	; 0x1432 <LCD_writeStringXY>
     d40:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
     d44:	1f 92       	push	r1
     d46:	8f 93       	push	r24
     d48:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
			LCD_writeStringXY(0, 0, buff);
     d4c:	1f 92       	push	r1
     d4e:	8f 93       	push	r24
     d50:	8d e7       	ldi	r24, 0x7D	; 125
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	9f 93       	push	r25
			sprintf(buff, "%02d:%02d", tmin, tsec);
     d56:	8f 93       	push	r24
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	e8 d6       	rcall	.+3536   	; 0x1b2e <sprintf>
     d5e:	ae 01       	movw	r20, r28
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	66 d3       	rcall	.+1740   	; 0x1432 <LCD_writeStringXY>
     d66:	8d b7       	in	r24, 0x3d	; 61
     d68:	9e b7       	in	r25, 0x3e	; 62
     d6a:	08 96       	adiw	r24, 0x08	; 8
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	9e bf       	out	0x3e, r25	; 62
     d72:	0f be       	out	0x3f, r0	; 63
			LCD_writeStringXY(1, 0, buff);
     d74:	8d bf       	out	0x3d, r24	; 61
     d76:	f2 c0       	rjmp	.+484    	; 0xf5c <fan_buttonCtrl+0x84e>
     d78:	88 ef       	ldi	r24, 0xF8	; 248
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	02 d1       	rcall	.+516    	; 0xf82 <Button_GetState>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	71 f5       	brne	.+92     	; 0xdde <fan_buttonCtrl+0x6d0>
     d82:	60 da       	rcall	.-2880   	; 0x244 <fan_buzzer>
     d84:	19 da       	rcall	.-3022   	; 0x1b8 <fan_normal>
     d86:	03 da       	rcall	.-3066   	; 0x18e <fan_setTimerSec>
     d88:	5d d3       	rcall	.+1722   	; 0x1444 <LCD_displayClear>
     d8a:	ce ed       	ldi	r28, 0xDE	; 222
     d8c:	d1 e0       	ldi	r29, 0x01	; 1
     d8e:	8b e0       	ldi	r24, 0x0B	; 11
		}
		else if(Button_GetState(&btnSec) == ACT_RELEASED)
     d90:	ef eb       	ldi	r30, 0xBF	; 191
     d92:	f1 e0       	ldi	r31, 0x01	; 1
     d94:	de 01       	movw	r26, r28
     d96:	01 90       	ld	r0, Z+
     d98:	0d 92       	st	X+, r0
     d9a:	8a 95       	dec	r24
		{
			fan_buzzer();
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <fan_buttonCtrl+0x688>
     d9e:	ae 01       	movw	r20, r28
			fan_normal();
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
			
			fan_setTimerSec();
     da4:	46 d3       	rcall	.+1676   	; 0x1432 <LCD_writeStringXY>
			
			LCD_displayClear();
     da6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
			sprintf(buff, "Timer Mode");
     daa:	1f 92       	push	r1
     dac:	8f 93       	push	r24
     dae:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
     db2:	1f 92       	push	r1
     db4:	8f 93       	push	r24
			LCD_writeStringXY(0, 0, buff);
     db6:	8d e7       	ldi	r24, 0x7D	; 125
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	9f 93       	push	r25
     dbc:	8f 93       	push	r24
     dbe:	df 93       	push	r29
			sprintf(buff, "%02d:%02d", tmin, tsec);
     dc0:	cf 93       	push	r28
     dc2:	b5 d6       	rcall	.+3434   	; 0x1b2e <sprintf>
     dc4:	ae 01       	movw	r20, r28
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	33 d3       	rcall	.+1638   	; 0x1432 <LCD_writeStringXY>
     dcc:	8d b7       	in	r24, 0x3d	; 61
     dce:	9e b7       	in	r25, 0x3e	; 62
     dd0:	08 96       	adiw	r24, 0x08	; 8
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	9e bf       	out	0x3e, r25	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	8d bf       	out	0x3d, r24	; 61
     ddc:	bf c0       	rjmp	.+382    	; 0xf5c <fan_buttonCtrl+0x84e>
			LCD_writeStringXY(1, 0, buff);
     dde:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <min>
     de2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <tmin>
     de6:	98 13       	cpse	r25, r24
     de8:	26 c0       	rjmp	.+76     	; 0xe36 <fan_buttonCtrl+0x728>
     dea:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <sec>
     dee:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <tsec>
     df2:	98 13       	cpse	r25, r24
     df4:	20 c0       	rjmp	.+64     	; 0xe36 <fan_buttonCtrl+0x728>
		}
		else
		{
			if((min == tmin) && (sec == tsec))
     df6:	42 d3       	rcall	.+1668   	; 0x147c <Motor_Off>
     df8:	25 d3       	rcall	.+1610   	; 0x1444 <LCD_displayClear>
     dfa:	88 e0       	ldi	r24, 0x08	; 8
     dfc:	eb e0       	ldi	r30, 0x0B	; 11
     dfe:	f1 e0       	ldi	r31, 0x01	; 1
     e00:	ae ed       	ldi	r26, 0xDE	; 222
     e02:	b1 e0       	ldi	r27, 0x01	; 1
     e04:	01 90       	ld	r0, Z+
     e06:	0d 92       	st	X+, r0
     e08:	8a 95       	dec	r24
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <fan_buttonCtrl+0x6f6>
			{
				Motor_Off();
     e0c:	4e ed       	ldi	r20, 0xDE	; 222
     e0e:	51 e0       	ldi	r21, 0x01	; 1
				
				LCD_displayClear();
     e10:	60 e0       	ldi	r22, 0x00	; 0
				sprintf(buff, "Fan Off");
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	0e d3       	rcall	.+1564   	; 0x1432 <LCD_writeStringXY>
     e16:	81 e1       	ldi	r24, 0x11	; 17
     e18:	e3 e1       	ldi	r30, 0x13	; 19
     e1a:	f1 e0       	ldi	r31, 0x01	; 1
     e1c:	ae ed       	ldi	r26, 0xDE	; 222
     e1e:	b1 e0       	ldi	r27, 0x01	; 1
     e20:	01 90       	ld	r0, Z+
     e22:	0d 92       	st	X+, r0
				LCD_writeStringXY(0, 0, buff);
     e24:	8a 95       	dec	r24
     e26:	e1 f7       	brne	.-8      	; 0xe20 <fan_buttonCtrl+0x712>
     e28:	4e ed       	ldi	r20, 0xDE	; 222
     e2a:	51 e0       	ldi	r21, 0x01	; 1
     e2c:	60 e0       	ldi	r22, 0x00	; 0
				sprintf(buff, "2:TIMER|3:NORMAL");
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	00 d3       	rcall	.+1536   	; 0x1432 <LCD_writeStringXY>
     e32:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <state>
     e36:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <min>
     e3a:	99 e8       	ldi	r25, 0x89	; 137
     e3c:	89 9f       	mul	r24, r25
				LCD_writeStringXY(1, 0, buff);
     e3e:	21 2d       	mov	r18, r1
     e40:	11 24       	eor	r1, r1
     e42:	22 95       	swap	r18
     e44:	26 95       	lsr	r18
     e46:	27 70       	andi	r18, 0x07	; 7
     e48:	3c e3       	ldi	r19, 0x3C	; 60
				
				state = OFF_SETTING;
     e4a:	23 9f       	mul	r18, r19
     e4c:	80 19       	sub	r24, r0
			}
			
			timerData = ((min%60)*100) + (sec%60);
     e4e:	11 24       	eor	r1, r1
     e50:	28 2f       	mov	r18, r24
     e52:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <sec>
     e56:	89 9f       	mul	r24, r25
     e58:	91 2d       	mov	r25, r1
     e5a:	11 24       	eor	r1, r1
     e5c:	92 95       	swap	r25
     e5e:	96 95       	lsr	r25
     e60:	97 70       	andi	r25, 0x07	; 7
     e62:	93 9f       	mul	r25, r19
     e64:	80 19       	sub	r24, r0
     e66:	11 24       	eor	r1, r1
     e68:	94 e6       	ldi	r25, 0x64	; 100
     e6a:	29 9f       	mul	r18, r25
     e6c:	80 0d       	add	r24, r0
     e6e:	11 24       	eor	r1, r1
     e70:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <timerData>
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	2c d2       	rcall	.+1112   	; 0x12d0 <FND_setFndData>
     e78:	bf d9       	rcall	.-3202   	; 0x1f8 <Motor_Safety>
     e7a:	70 c0       	rjmp	.+224    	; 0xf5c <fan_buttonCtrl+0x84e>
     e7c:	80 e1       	ldi	r24, 0x10	; 16
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	80 d0       	rcall	.+256    	; 0xf82 <Button_GetState>
			FND_setFndData(timerData);
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	11 f5       	brne	.+68     	; 0xeca <fan_buttonCtrl+0x7bc>
     e86:	de d9       	rcall	.-3140   	; 0x244 <fan_buzzer>
			Motor_Safety();
     e88:	f9 d2       	rcall	.+1522   	; 0x147c <Motor_Off>
     e8a:	dc d2       	rcall	.+1464   	; 0x1444 <LCD_displayClear>
     e8c:	88 e0       	ldi	r24, 0x08	; 8
		}
		break;
		
		case ON_NORMAL :
		if(Button_GetState(&btnOnOff) == ACT_RELEASED)
     e8e:	eb e0       	ldi	r30, 0x0B	; 11
     e90:	f1 e0       	ldi	r31, 0x01	; 1
     e92:	ae ed       	ldi	r26, 0xDE	; 222
     e94:	b1 e0       	ldi	r27, 0x01	; 1
     e96:	01 90       	ld	r0, Z+
     e98:	0d 92       	st	X+, r0
		{
			fan_buzzer();
     e9a:	8a 95       	dec	r24
     e9c:	e1 f7       	brne	.-8      	; 0xe96 <fan_buttonCtrl+0x788>
			Motor_Off();
     e9e:	4e ed       	ldi	r20, 0xDE	; 222
     ea0:	51 e0       	ldi	r21, 0x01	; 1
			
			LCD_displayClear();
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(buff, "Fan Off");
     ea6:	c5 d2       	rcall	.+1418   	; 0x1432 <LCD_writeStringXY>
     ea8:	81 e1       	ldi	r24, 0x11	; 17
     eaa:	e3 e1       	ldi	r30, 0x13	; 19
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	ae ed       	ldi	r26, 0xDE	; 222
     eb0:	b1 e0       	ldi	r27, 0x01	; 1
     eb2:	01 90       	ld	r0, Z+
     eb4:	0d 92       	st	X+, r0
     eb6:	8a 95       	dec	r24
			LCD_writeStringXY(0, 0, buff);
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <fan_buttonCtrl+0x7a4>
     eba:	4e ed       	ldi	r20, 0xDE	; 222
     ebc:	51 e0       	ldi	r21, 0x01	; 1
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	b7 d2       	rcall	.+1390   	; 0x1432 <LCD_writeStringXY>
			sprintf(buff, "2:TIMER|3:NORMAL");
     ec4:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <state>
     ec8:	49 c0       	rjmp	.+146    	; 0xf5c <fan_buttonCtrl+0x84e>
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	59 d0       	rcall	.+178    	; 0xf82 <Button_GetState>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	19 f5       	brne	.+70     	; 0xf1a <fan_buttonCtrl+0x80c>
     ed4:	b7 d9       	rcall	.-3218   	; 0x244 <fan_buzzer>
			LCD_writeStringXY(1, 0, buff);
     ed6:	70 d9       	rcall	.-3360   	; 0x1b8 <fan_normal>
     ed8:	b5 d2       	rcall	.+1386   	; 0x1444 <LCD_displayClear>
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	e8 eb       	ldi	r30, 0xB8	; 184
     ede:	f1 e0       	ldi	r31, 0x01	; 1
     ee0:	ae ed       	ldi	r26, 0xDE	; 222
			
			state = OFF_SETTING;
     ee2:	b1 e0       	ldi	r27, 0x01	; 1
     ee4:	01 90       	ld	r0, Z+
     ee6:	0d 92       	st	X+, r0
		}
		else if(Button_GetState(&btnNormal) == ACT_RELEASED)
     ee8:	8a 95       	dec	r24
     eea:	e1 f7       	brne	.-8      	; 0xee4 <fan_buttonCtrl+0x7d6>
     eec:	4e ed       	ldi	r20, 0xDE	; 222
     eee:	51 e0       	ldi	r21, 0x01	; 1
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
		{
			fan_buzzer();
     ef4:	9e d2       	rcall	.+1340   	; 0x1432 <LCD_writeStringXY>
     ef6:	81 e1       	ldi	r24, 0x11	; 17
			fan_normal();
     ef8:	e3 e1       	ldi	r30, 0x13	; 19
     efa:	f1 e0       	ldi	r31, 0x01	; 1
			
			LCD_displayClear();
     efc:	ae ed       	ldi	r26, 0xDE	; 222
     efe:	b1 e0       	ldi	r27, 0x01	; 1
			sprintf(buff, "Fan On");
     f00:	01 90       	ld	r0, Z+
     f02:	0d 92       	st	X+, r0
     f04:	8a 95       	dec	r24
     f06:	e1 f7       	brne	.-8      	; 0xf00 <fan_buttonCtrl+0x7f2>
     f08:	4e ed       	ldi	r20, 0xDE	; 222
     f0a:	51 e0       	ldi	r21, 0x01	; 1
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 d2       	rcall	.+1312   	; 0x1432 <LCD_writeStringXY>
			LCD_writeStringXY(0, 0, buff);
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <state>
     f18:	21 c0       	rjmp	.+66     	; 0xf5c <fan_buttonCtrl+0x84e>
     f1a:	82 e2       	ldi	r24, 0x22	; 34
     f1c:	92 e0       	ldi	r25, 0x02	; 2
			sprintf(buff, "2:TIMER|3:NORMAL");
     f1e:	31 d0       	rcall	.+98     	; 0xf82 <Button_GetState>
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	b1 f4       	brne	.+44     	; 0xf50 <fan_buttonCtrl+0x842>
     f24:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <normalState>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	49 f0       	breq	.+18     	; 0xf3e <fan_buttonCtrl+0x830>
     f2c:	18 f0       	brcs	.+6      	; 0xf34 <fan_buttonCtrl+0x826>
     f2e:	82 30       	cpi	r24, 0x02	; 2
			LCD_writeStringXY(1, 0, buff);
     f30:	59 f0       	breq	.+22     	; 0xf48 <fan_buttonCtrl+0x83a>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <fan_buttonCtrl+0x84e>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <normalState>
     f3a:	1b da       	rcall	.-3018   	; 0x372 <fan_Motor_On>
			
			state = OFF_ON;
     f3c:	0f c0       	rjmp	.+30     	; 0xf5c <fan_buttonCtrl+0x84e>
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <normalState>
		}
		else if(Button_GetState(&btnNext) == ACT_RELEASED)
     f44:	16 da       	rcall	.-3028   	; 0x372 <fan_Motor_On>
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <fan_buttonCtrl+0x84e>
     f48:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <normalState>
     f4c:	12 da       	rcall	.-3036   	; 0x372 <fan_Motor_On>
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <fan_buttonCtrl+0x84e>
		{
			switch(normalState)
     f50:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <timerData>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	bb d1       	rcall	.+886    	; 0x12d0 <FND_setFndData>
     f5a:	4e d9       	rcall	.-3428   	; 0x1f8 <Motor_Safety>
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
			{
				case MODE1 :
				normalState = MODE2;
     f60:	08 95       	ret

00000f62 <fan_run>:
     f62:	d5 db       	rcall	.-2134   	; 0x70e <fan_buttonCtrl>
     f64:	70 ca       	rjmp	.-2848   	; 0x446 <fan_UARTCtrl>
				fan_Motor_On();
     f66:	08 95       	ret

00000f68 <Button_init>:
﻿#include "Button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
     f68:	fc 01       	movw	r30, r24
     f6a:	cb 01       	movw	r24, r22
	btn->DDR = ddr;
     f6c:	71 83       	std	Z+1, r23	; 0x01
     f6e:	60 83       	st	Z, r22
	btn->PIN = pin;
     f70:	53 83       	std	Z+3, r21	; 0x03
     f72:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinNum;
     f74:	24 83       	std	Z+4, r18	; 0x04
	btn->prevState = RELEASED;
     f76:	31 e0       	ldi	r19, 0x01	; 1
     f78:	35 83       	std	Z+5, r19	; 0x05
	
	Gpio_initPin(btn->DDR, btn->pinNum, INPUT);	// *btn->DDR &= ~(1<<btn->pinNum);
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	62 2f       	mov	r22, r18
     f7e:	b2 c3       	rjmp	.+1892   	; 0x16e4 <Gpio_initPin>
     f80:	08 95       	ret

00000f82 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn)
{
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	ec 01       	movw	r28, r24
	uint8_t curState = Gpio_readPin(btn->PIN, btn->pinNum);	// uint8_t curState = *btn->PIN & (1<<btn->pinNum);
     f88:	6c 81       	ldd	r22, Y+4	; 0x04
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	e1 d3       	rcall	.+1986   	; 0x1752 <Gpio_readPin>
	
	if((curState == PUSHED) && (btn->prevState == RELEASED))
     f90:	81 11       	cpse	r24, r1
     f92:	0c c0       	rjmp	.+24     	; 0xfac <Button_GetState+0x2a>
     f94:	9d 81       	ldd	r25, Y+5	; 0x05
     f96:	91 30       	cpi	r25, 0x01	; 1
     f98:	49 f4       	brne	.+18     	; 0xfac <Button_GetState+0x2a>
     f9a:	8f e3       	ldi	r24, 0x3F	; 63
     f9c:	9c e9       	ldi	r25, 0x9C	; 156
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <Button_GetState+0x1c>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <Button_GetState+0x22>
     fa4:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = PUSHED;
     fa6:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	11 c0       	rjmp	.+34     	; 0xfce <Button_GetState+0x4c>
	}
	else if((curState != PUSHED) && (btn->prevState == PUSHED))
     fac:	88 23       	and	r24, r24
     fae:	61 f0       	breq	.+24     	; 0xfc8 <Button_GetState+0x46>
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	81 11       	cpse	r24, r1
     fb4:	0b c0       	rjmp	.+22     	; 0xfcc <Button_GetState+0x4a>
     fb6:	8f e3       	ldi	r24, 0x3F	; 63
     fb8:	9c e9       	ldi	r25, 0x9C	; 156
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <Button_GetState+0x38>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <Button_GetState+0x3e>
     fc0:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = RELEASED;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_RELEASED;
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <Button_GetState+0x4c>
	}
	return ACT_NONE;
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	01 c0       	rjmp	.+2      	; 0xfce <Button_GetState+0x4c>
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <Buzzer_init>:
﻿#include "Buzzer.h"

void Buzzer_init()
{	
	Gpio_initPin(&DDRE, 4, OUTPUT);
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	64 e0       	ldi	r22, 0x04	; 4
     fd8:	82 e2       	ldi	r24, 0x22	; 34
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	83 d3       	rcall	.+1798   	; 0x16e4 <Gpio_initPin>
	
	// TIM3, Top ICR, DutyCycle OCR3A
	// Prescaler 1/64
	TCCR3B |= (0<<CS32) | (1<<CS31) | (1<<CS30);
     fde:	ea e8       	ldi	r30, 0x8A	; 138
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	83 60       	ori	r24, 0x03	; 3
     fe6:	80 83       	st	Z, r24
	
	//fast PWM mode, TOP : ICR
	TCCR3B |= (1<<WGM33) | (1<<WGM32);
     fe8:	80 81       	ld	r24, Z
     fea:	88 61       	ori	r24, 0x18	; 24
     fec:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM31) | (0<<WGM30);
     fee:	eb e8       	ldi	r30, 0x8B	; 139
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	80 83       	st	Z, r24
     ff8:	08 95       	ret

00000ffa <Buzzer_soundOn>:
}

void Buzzer_soundOn()
{
	// Non-Inverting Mode
	TCCR3A |= (1<<COM3B1) | (0<<COM3B0);
     ffa:	eb e8       	ldi	r30, 0x8B	; 139
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 62       	ori	r24, 0x20	; 32
    1002:	80 83       	st	Z, r24
    1004:	08 95       	ret

00001006 <Buzzer_soundOff>:
}

void Buzzer_soundOff()
{
	TCCR3A &= ~((1<<COM3B1) | (1<<COM3B0));
    1006:	eb e8       	ldi	r30, 0x8B	; 139
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8f 7c       	andi	r24, 0xCF	; 207
    100e:	80 83       	st	Z, r24
    1010:	08 95       	ret

00001012 <Buzzer_makeHerz>:
}

void Buzzer_makeHerz(uint16_t herz)
{
	if(herz < 100)
    1012:	84 36       	cpi	r24, 0x64	; 100
    1014:	91 05       	cpc	r25, r1
    1016:	d0 f0       	brcs	.+52     	; 0x104c <Buzzer_makeHerz+0x3a>
	{
		herz = 100;
	}
	else if(herz > 4000)
    1018:	81 3a       	cpi	r24, 0xA1	; 161
    101a:	2f e0       	ldi	r18, 0x0F	; 15
    101c:	92 07       	cpc	r25, r18
    101e:	b0 f4       	brcc	.+44     	; 0x104c <Buzzer_makeHerz+0x3a>
	{
		herz = 4000;
	}
	else
	{
		ICR3 = (250000/herz) - 1;
    1020:	9c 01       	movw	r18, r24
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	60 e9       	ldi	r22, 0x90	; 144
    1028:	70 ed       	ldi	r23, 0xD0	; 208
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	29 d5       	rcall	.+2642   	; 0x1a82 <__divmodsi4>
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	31 09       	sbc	r19, r1
    1034:	e0 e8       	ldi	r30, 0x80	; 128
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	31 83       	std	Z+1, r19	; 0x01
    103a:	20 83       	st	Z, r18
		OCR3B = ICR3 / 2;
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	96 95       	lsr	r25
    1042:	87 95       	ror	r24
    1044:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1048:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    104c:	08 95       	ret

0000104e <FND_init>:
	fndColonFlag = 1;
}

void FND_colonOff()
{
	fndColonFlag = 0;
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	84 e6       	ldi	r24, 0x64	; 100
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	46 d3       	rcall	.+1676   	; 0x16e4 <Gpio_initPin>
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	65 e0       	ldi	r22, 0x05	; 5
    105c:	82 e2       	ldi	r24, 0x22	; 34
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	41 d3       	rcall	.+1666   	; 0x16e4 <Gpio_initPin>
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	66 e0       	ldi	r22, 0x06	; 6
    1066:	82 e2       	ldi	r24, 0x22	; 34
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	3c d3       	rcall	.+1656   	; 0x16e4 <Gpio_initPin>
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	67 e0       	ldi	r22, 0x07	; 7
    1070:	82 e2       	ldi	r24, 0x22	; 34
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	37 d3       	rcall	.+1646   	; 0x16e4 <Gpio_initPin>
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	81 e6       	ldi	r24, 0x61	; 97
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	2a c3       	rjmp	.+1620   	; 0x16d2 <Gpio_initPort>
    107e:	08 95       	ret

00001080 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum)
{
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	2b 97       	sbiw	r28, 0x0b	; 11
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	8c 01       	movw	r16, r24
	static uint8_t fndDigitState = 0;
	uint8_t fndFont[11] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67, 0x80};
    109a:	8b e0       	ldi	r24, 0x0B	; 11
    109c:	e0 e0       	ldi	r30, 0x00	; 0
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	de 01       	movw	r26, r28
    10a2:	11 96       	adiw	r26, 0x01	; 1
    10a4:	01 90       	ld	r0, Z+
    10a6:	0d 92       	st	X+, r0
    10a8:	8a 95       	dec	r24
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <FND_dispNum+0x24>
	
	fndDigitState = ( fndDigitState +1 ) %5;
    10ac:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <fndDigitState.1772>
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	65 e0       	ldi	r22, 0x05	; 5
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	d1 d4       	rcall	.+2466   	; 0x1a5c <__divmodhi4>
    10ba:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <fndDigitState.1772>
	
	Gpio_writePin(&FND_DIGIT_PORT2,FND_DIGIT_1,GPIO_PIN_SET);
    10be:	41 e0       	ldi	r20, 0x01	; 1
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	85 e6       	ldi	r24, 0x65	; 101
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	2b d3       	rcall	.+1622   	; 0x171e <Gpio_writePin>
	Gpio_writePin(&FND_DIGIT_PORT,FND_DIGIT_2,GPIO_PIN_SET);
    10c8:	41 e0       	ldi	r20, 0x01	; 1
    10ca:	65 e0       	ldi	r22, 0x05	; 5
    10cc:	83 e2       	ldi	r24, 0x23	; 35
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	26 d3       	rcall	.+1612   	; 0x171e <Gpio_writePin>
	Gpio_writePin(&FND_DIGIT_PORT,FND_DIGIT_3,GPIO_PIN_SET);
    10d2:	41 e0       	ldi	r20, 0x01	; 1
    10d4:	66 e0       	ldi	r22, 0x06	; 6
    10d6:	83 e2       	ldi	r24, 0x23	; 35
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	21 d3       	rcall	.+1602   	; 0x171e <Gpio_writePin>
	Gpio_writePin(&FND_DIGIT_PORT,FND_DIGIT_4,GPIO_PIN_SET);
    10dc:	41 e0       	ldi	r20, 0x01	; 1
    10de:	67 e0       	ldi	r22, 0x07	; 7
    10e0:	83 e2       	ldi	r24, 0x23	; 35
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	1c d3       	rcall	.+1592   	; 0x171e <Gpio_writePin>
	
	
	switch(fndDigitState)
    10e6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <fndDigitState.1772>
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <FND_dispNum+0x70>
    10ee:	7a c0       	rjmp	.+244    	; 0x11e4 <__stack+0xe5>
    10f0:	30 f4       	brcc	.+12     	; 0x10fe <FND_dispNum+0x7e>
    10f2:	88 23       	and	r24, r24
    10f4:	59 f0       	breq	.+22     	; 0x110c <__stack+0xd>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <FND_dispNum+0x7c>
    10fa:	41 c0       	rjmp	.+130    	; 0x117e <__stack+0x7f>
    10fc:	de c0       	rjmp	.+444    	; 0x12ba <__stack+0x1bb>
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	09 f4       	brne	.+2      	; 0x1104 <__stack+0x5>
    1102:	a1 c0       	rjmp	.+322    	; 0x1246 <__stack+0x147>
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	09 f4       	brne	.+2      	; 0x110a <__stack+0xb>
    1108:	c6 c0       	rjmp	.+396    	; 0x1296 <__stack+0x197>
    110a:	d7 c0       	rjmp	.+430    	; 0x12ba <__stack+0x1bb>
	{
		case 0 :
		Gpio_writePort(&FND_DATA_PORT, fndFont[fndNum/1000%10]);
    110c:	98 01       	movw	r18, r16
    110e:	36 95       	lsr	r19
    1110:	27 95       	ror	r18
    1112:	36 95       	lsr	r19
    1114:	27 95       	ror	r18
    1116:	36 95       	lsr	r19
    1118:	27 95       	ror	r18
    111a:	a5 ec       	ldi	r26, 0xC5	; 197
    111c:	b0 e2       	ldi	r27, 0x20	; 32
    111e:	cd d4       	rcall	.+2458   	; 0x1aba <__umulhisi3>
    1120:	ac 01       	movw	r20, r24
    1122:	52 95       	swap	r21
    1124:	42 95       	swap	r20
    1126:	4f 70       	andi	r20, 0x0F	; 15
    1128:	45 27       	eor	r20, r21
    112a:	5f 70       	andi	r21, 0x0F	; 15
    112c:	45 27       	eor	r20, r21
    112e:	9a 01       	movw	r18, r20
    1130:	ad ec       	ldi	r26, 0xCD	; 205
    1132:	bc ec       	ldi	r27, 0xCC	; 204
    1134:	c2 d4       	rcall	.+2436   	; 0x1aba <__umulhisi3>
    1136:	96 95       	lsr	r25
    1138:	87 95       	ror	r24
    113a:	96 95       	lsr	r25
    113c:	87 95       	ror	r24
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	9c 01       	movw	r18, r24
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	82 0f       	add	r24, r18
    1156:	93 1f       	adc	r25, r19
    1158:	9a 01       	movw	r18, r20
    115a:	28 1b       	sub	r18, r24
    115c:	39 0b       	sbc	r19, r25
    115e:	e1 e0       	ldi	r30, 0x01	; 1
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	ec 0f       	add	r30, r28
    1164:	fd 1f       	adc	r31, r29
    1166:	e2 0f       	add	r30, r18
    1168:	f3 1f       	adc	r31, r19
    116a:	60 81       	ld	r22, Z
    116c:	82 e6       	ldi	r24, 0x62	; 98
    116e:	90 e0       	ldi	r25, 0x00	; 0
		Gpio_writePin(&FND_DIGIT_PORT2,FND_DIGIT_1,GPIO_PIN_RESET);         // 천의자리 ON
    1170:	d3 d2       	rcall	.+1446   	; 0x1718 <Gpio_writePort>
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	85 e6       	ldi	r24, 0x65	; 101
    1178:	90 e0       	ldi	r25, 0x00	; 0
		break;
    117a:	d1 d2       	rcall	.+1442   	; 0x171e <Gpio_writePin>
		case 1 :
		Gpio_writePort(&FND_DATA_PORT, fndFont[fndNum/100%10]);
    117c:	9e c0       	rjmp	.+316    	; 0x12ba <__stack+0x1bb>
    117e:	98 01       	movw	r18, r16
    1180:	36 95       	lsr	r19
    1182:	27 95       	ror	r18
    1184:	36 95       	lsr	r19
    1186:	27 95       	ror	r18
    1188:	ab e7       	ldi	r26, 0x7B	; 123
    118a:	b4 e1       	ldi	r27, 0x14	; 20
    118c:	96 d4       	rcall	.+2348   	; 0x1aba <__umulhisi3>
    118e:	ac 01       	movw	r20, r24
    1190:	56 95       	lsr	r21
    1192:	47 95       	ror	r20
    1194:	9a 01       	movw	r18, r20
    1196:	ad ec       	ldi	r26, 0xCD	; 205
    1198:	bc ec       	ldi	r27, 0xCC	; 204
    119a:	8f d4       	rcall	.+2334   	; 0x1aba <__umulhisi3>
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	9c 01       	movw	r18, r24
    11aa:	22 0f       	add	r18, r18
    11ac:	33 1f       	adc	r19, r19
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	9a 01       	movw	r18, r20
    11c0:	28 1b       	sub	r18, r24
    11c2:	39 0b       	sbc	r19, r25
    11c4:	e1 e0       	ldi	r30, 0x01	; 1
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	ec 0f       	add	r30, r28
    11ca:	fd 1f       	adc	r31, r29
    11cc:	e2 0f       	add	r30, r18
    11ce:	f3 1f       	adc	r31, r19
    11d0:	60 81       	ld	r22, Z
    11d2:	82 e6       	ldi	r24, 0x62	; 98
    11d4:	90 e0       	ldi	r25, 0x00	; 0
		Gpio_writePin(&FND_DIGIT_PORT,FND_DIGIT_2,GPIO_PIN_RESET);         // 백의자리 ON
    11d6:	a0 d2       	rcall	.+1344   	; 0x1718 <Gpio_writePort>
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	65 e0       	ldi	r22, 0x05	; 5
    11dc:	83 e2       	ldi	r24, 0x23	; 35
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9e d2       	rcall	.+1340   	; 0x171e <Gpio_writePin>
		break;
		case 2 :
		Gpio_writePort(&FND_DATA_PORT, fndFont[fndNum/10%10]);
    11e2:	6b c0       	rjmp	.+214    	; 0x12ba <__stack+0x1bb>
    11e4:	98 01       	movw	r18, r16
    11e6:	ad ec       	ldi	r26, 0xCD	; 205
    11e8:	bc ec       	ldi	r27, 0xCC	; 204
    11ea:	67 d4       	rcall	.+2254   	; 0x1aba <__umulhisi3>
    11ec:	ac 01       	movw	r20, r24
    11ee:	56 95       	lsr	r21
    11f0:	47 95       	ror	r20
    11f2:	56 95       	lsr	r21
    11f4:	47 95       	ror	r20
    11f6:	56 95       	lsr	r21
    11f8:	47 95       	ror	r20
    11fa:	9a 01       	movw	r18, r20
    11fc:	5e d4       	rcall	.+2236   	; 0x1aba <__umulhisi3>
    11fe:	96 95       	lsr	r25
    1200:	87 95       	ror	r24
    1202:	96 95       	lsr	r25
    1204:	87 95       	ror	r24
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	9c 01       	movw	r18, r24
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	9a 01       	movw	r18, r20
    1222:	28 1b       	sub	r18, r24
    1224:	39 0b       	sbc	r19, r25
    1226:	e1 e0       	ldi	r30, 0x01	; 1
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	ec 0f       	add	r30, r28
    122c:	fd 1f       	adc	r31, r29
    122e:	e2 0f       	add	r30, r18
    1230:	f3 1f       	adc	r31, r19
    1232:	60 81       	ld	r22, Z
    1234:	82 e6       	ldi	r24, 0x62	; 98
    1236:	90 e0       	ldi	r25, 0x00	; 0
		Gpio_writePin(&FND_DIGIT_PORT,FND_DIGIT_3,GPIO_PIN_RESET);         // 십의자리 ON            // 십의자리 ON
    1238:	6f d2       	rcall	.+1246   	; 0x1718 <Gpio_writePort>
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	66 e0       	ldi	r22, 0x06	; 6
    123e:	83 e2       	ldi	r24, 0x23	; 35
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	6d d2       	rcall	.+1242   	; 0x171e <Gpio_writePin>
		break;
    1244:	3a c0       	rjmp	.+116    	; 0x12ba <__stack+0x1bb>
		case 3 :
		Gpio_writePort(&FND_DATA_PORT, fndFont[fndNum%10]);
    1246:	98 01       	movw	r18, r16
    1248:	ad ec       	ldi	r26, 0xCD	; 205
    124a:	bc ec       	ldi	r27, 0xCC	; 204
    124c:	36 d4       	rcall	.+2156   	; 0x1aba <__umulhisi3>
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	96 95       	lsr	r25
    1258:	87 95       	ror	r24
    125a:	9c 01       	movw	r18, r24
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	98 01       	movw	r18, r16
    1272:	28 1b       	sub	r18, r24
    1274:	39 0b       	sbc	r19, r25
    1276:	e1 e0       	ldi	r30, 0x01	; 1
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	ec 0f       	add	r30, r28
    127c:	fd 1f       	adc	r31, r29
    127e:	e2 0f       	add	r30, r18
    1280:	f3 1f       	adc	r31, r19
    1282:	60 81       	ld	r22, Z
    1284:	82 e6       	ldi	r24, 0x62	; 98
    1286:	90 e0       	ldi	r25, 0x00	; 0
		Gpio_writePin(&FND_DIGIT_PORT,FND_DIGIT_4,GPIO_PIN_RESET);         // 일의자리 ON               // 일의자리 ON
    1288:	47 d2       	rcall	.+1166   	; 0x1718 <Gpio_writePort>
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	67 e0       	ldi	r22, 0x07	; 7
    128e:	83 e2       	ldi	r24, 0x23	; 35
    1290:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1292:	45 d2       	rcall	.+1162   	; 0x171e <Gpio_writePin>
		case 4 :
		if(fndColonFlag)  Gpio_writePort(&FND_DATA_PORT, fndFont[FND_DP]);
    1294:	12 c0       	rjmp	.+36     	; 0x12ba <__stack+0x1bb>
    1296:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <fndColonFlag>
    129a:	88 23       	and	r24, r24
    129c:	29 f0       	breq	.+10     	; 0x12a8 <__stack+0x1a9>
    129e:	60 e8       	ldi	r22, 0x80	; 128
    12a0:	82 e6       	ldi	r24, 0x62	; 98
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	39 d2       	rcall	.+1138   	; 0x1718 <Gpio_writePort>
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <__stack+0x1b1>
		else Gpio_writePort(&FND_DATA_PORT, 0x00);
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	82 e6       	ldi	r24, 0x62	; 98
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	34 d2       	rcall	.+1128   	; 0x1718 <Gpio_writePort>
    12b0:	40 e0       	ldi	r20, 0x00	; 0
		Gpio_writePin(&FND_DIGIT_PORT,FND_DIGIT_2,GPIO_PIN_RESET);         // DP
    12b2:	65 e0       	ldi	r22, 0x05	; 5
    12b4:	83 e2       	ldi	r24, 0x23	; 35
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	32 d2       	rcall	.+1124   	; 0x171e <Gpio_writePin>
    12ba:	2b 96       	adiw	r28, 0x0b	; 11
    12bc:	0f b6       	in	r0, 0x3f	; 63
		break;
	}
}
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <FND_setFndData>:
    12d0:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <fndData+0x1>

void FND_setFndData(uint16_t data)
{
	fndData = data;
    12d4:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <fndData>
    12d8:	08 95       	ret

000012da <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
    12da:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <fndData>
    12de:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <fndData+0x1>
    12e2:	ce ce       	rjmp	.-612    	; 0x1080 <FND_dispNum>
    12e4:	08 95       	ret

000012e6 <Gpio_init>:
	LCD_writeCmdData(LCD_DISPLAY_OFF);   // LCD_Display_Off      0x08
}

void LCD_displayOn()
{
	LCD_writeCmdData(LCD_DISPLAY_ON);   // LCD_Display_On      0x0C
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	65 e0       	ldi	r22, 0x05	; 5
    12ea:	87 e3       	ldi	r24, 0x37	; 55
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	fa d1       	rcall	.+1012   	; 0x16e4 <Gpio_initPin>
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	66 e0       	ldi	r22, 0x06	; 6
    12f4:	87 e3       	ldi	r24, 0x37	; 55
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	f5 d1       	rcall	.+1002   	; 0x16e4 <Gpio_initPin>
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	67 e0       	ldi	r22, 0x07	; 7
    12fe:	87 e3       	ldi	r24, 0x37	; 55
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	f0 d1       	rcall	.+992    	; 0x16e4 <Gpio_initPin>
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	84 e3       	ldi	r24, 0x34	; 52
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	e3 c1       	rjmp	.+966    	; 0x16d2 <Gpio_initPort>
    130c:	08 95       	ret

0000130e <Gpio_writeControlData>:
    130e:	68 2f       	mov	r22, r24
    1310:	88 e3       	ldi	r24, 0x38	; 56
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	01 c2       	rjmp	.+1026   	; 0x1718 <Gpio_writePort>
    1316:	08 95       	ret

00001318 <Gpio_writeData>:
    1318:	68 2f       	mov	r22, r24
    131a:	85 e3       	ldi	r24, 0x35	; 53
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	fc c1       	rjmp	.+1016   	; 0x1718 <Gpio_writePort>
    1320:	08 95       	ret

00001322 <LCD_CmdMode>:
    1322:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <lcdControlData>
    1326:	8f 7d       	andi	r24, 0xDF	; 223
    1328:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdControlData>
    132c:	f0 cf       	rjmp	.-32     	; 0x130e <Gpio_writeControlData>
    132e:	08 95       	ret

00001330 <LCD_CharMode>:
    1330:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <lcdControlData>
    1334:	80 62       	ori	r24, 0x20	; 32
    1336:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdControlData>
    133a:	e9 cf       	rjmp	.-46     	; 0x130e <Gpio_writeControlData>
    133c:	08 95       	ret

0000133e <LCD_writeMode>:
    133e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <lcdControlData>
    1342:	8f 7b       	andi	r24, 0xBF	; 191
    1344:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdControlData>
    1348:	e2 cf       	rjmp	.-60     	; 0x130e <Gpio_writeControlData>
    134a:	08 95       	ret

0000134c <LCD_enableHigh>:
    134c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <lcdControlData>
    1350:	80 68       	ori	r24, 0x80	; 128
    1352:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdControlData>
    1356:	db df       	rcall	.-74     	; 0x130e <Gpio_writeControlData>
    1358:	8f e9       	ldi	r24, 0x9F	; 159
    135a:	9f e0       	ldi	r25, 0x0F	; 15
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <LCD_enableHigh+0x10>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <LCD_enableHigh+0x16>
    1362:	00 00       	nop
    1364:	08 95       	ret

00001366 <LCD_enableLow>:
    1366:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <lcdControlData>
    136a:	8f 77       	andi	r24, 0x7F	; 127
    136c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdControlData>
    1370:	ce df       	rcall	.-100    	; 0x130e <Gpio_writeControlData>
    1372:	8f e9       	ldi	r24, 0x9F	; 159
    1374:	9f e0       	ldi	r25, 0x0F	; 15
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <LCD_enableLow+0x10>
    137a:	00 c0       	rjmp	.+0      	; 0x137c <LCD_enableLow+0x16>
    137c:	00 00       	nop
    137e:	08 95       	ret

00001380 <LCD_writeByte>:
    1380:	cb cf       	rjmp	.-106    	; 0x1318 <Gpio_writeData>
    1382:	08 95       	ret

00001384 <LCD_writeCmdData>:
    1384:	cf 93       	push	r28
    1386:	c8 2f       	mov	r28, r24
    1388:	cc df       	rcall	.-104    	; 0x1322 <LCD_CmdMode>
    138a:	d9 df       	rcall	.-78     	; 0x133e <LCD_writeMode>
    138c:	df df       	rcall	.-66     	; 0x134c <LCD_enableHigh>
    138e:	8c 2f       	mov	r24, r28
    1390:	f7 df       	rcall	.-18     	; 0x1380 <LCD_writeByte>
    1392:	e9 df       	rcall	.-46     	; 0x1366 <LCD_enableLow>
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <LCD_init>:
    1398:	a6 df       	rcall	.-180    	; 0x12e6 <Gpio_init>
    139a:	8f e5       	ldi	r24, 0x5F	; 95
    139c:	9a ee       	ldi	r25, 0xEA	; 234
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <LCD_init+0x6>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <LCD_init+0xc>
    13a4:	00 00       	nop
    13a6:	88 e3       	ldi	r24, 0x38	; 56
    13a8:	ed df       	rcall	.-38     	; 0x1384 <LCD_writeCmdData>
    13aa:	8f e1       	ldi	r24, 0x1F	; 31
    13ac:	9e e4       	ldi	r25, 0x4E	; 78
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_init+0x16>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <LCD_init+0x1c>
    13b4:	00 00       	nop
    13b6:	88 e3       	ldi	r24, 0x38	; 56
    13b8:	e5 df       	rcall	.-54     	; 0x1384 <LCD_writeCmdData>
    13ba:	8f e9       	ldi	r24, 0x9F	; 159
    13bc:	9f e0       	ldi	r25, 0x0F	; 15
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <LCD_init+0x26>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <LCD_init+0x2c>
    13c4:	00 00       	nop
    13c6:	88 e3       	ldi	r24, 0x38	; 56
    13c8:	dd df       	rcall	.-70     	; 0x1384 <LCD_writeCmdData>
    13ca:	88 e3       	ldi	r24, 0x38	; 56
    13cc:	db df       	rcall	.-74     	; 0x1384 <LCD_writeCmdData>
    13ce:	88 e0       	ldi	r24, 0x08	; 8
    13d0:	d9 df       	rcall	.-78     	; 0x1384 <LCD_writeCmdData>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	d7 df       	rcall	.-82     	; 0x1384 <LCD_writeCmdData>
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	d5 df       	rcall	.-86     	; 0x1384 <LCD_writeCmdData>
    13da:	8c e0       	ldi	r24, 0x0C	; 12
    13dc:	d3 cf       	rjmp	.-90     	; 0x1384 <LCD_writeCmdData>
    13de:	08 95       	ret

000013e0 <LCD_writeCharData>:
    13e0:	cf 93       	push	r28
    13e2:	c8 2f       	mov	r28, r24
    13e4:	a5 df       	rcall	.-182    	; 0x1330 <LCD_CharMode>
    13e6:	ab df       	rcall	.-170    	; 0x133e <LCD_writeMode>
    13e8:	b1 df       	rcall	.-158    	; 0x134c <LCD_enableHigh>
    13ea:	8c 2f       	mov	r24, r28
    13ec:	c9 df       	rcall	.-110    	; 0x1380 <LCD_writeByte>
    13ee:	bb df       	rcall	.-138    	; 0x1366 <LCD_enableLow>
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <LCD_writeString>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	8c 01       	movw	r16, r24
    13fe:	c0 e0       	ldi	r28, 0x00	; 0
    1400:	d0 e0       	ldi	r29, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <LCD_writeString+0x14>
    1404:	ed df       	rcall	.-38     	; 0x13e0 <LCD_writeCharData>
    1406:	21 96       	adiw	r28, 0x01	; 1
    1408:	f8 01       	movw	r30, r16
    140a:	ec 0f       	add	r30, r28
    140c:	fd 1f       	adc	r31, r29
    140e:	80 81       	ld	r24, Z
    1410:	81 11       	cpse	r24, r1
    1412:	f8 cf       	rjmp	.-16     	; 0x1404 <LCD_writeString+0x10>
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	08 95       	ret

0000141e <LCD_gotoXY>:
    141e:	6f 70       	andi	r22, 0x0F	; 15
    1420:	81 70       	andi	r24, 0x01	; 1
    1422:	90 e4       	ldi	r25, 0x40	; 64
    1424:	89 9f       	mul	r24, r25
    1426:	60 0d       	add	r22, r0
    1428:	11 24       	eor	r1, r1
    142a:	86 2f       	mov	r24, r22
    142c:	80 58       	subi	r24, 0x80	; 128
    142e:	aa cf       	rjmp	.-172    	; 0x1384 <LCD_writeCmdData>
    1430:	08 95       	ret

00001432 <LCD_writeStringXY>:
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	ea 01       	movw	r28, r20
    1438:	f2 df       	rcall	.-28     	; 0x141e <LCD_gotoXY>
    143a:	ce 01       	movw	r24, r28
    143c:	db df       	rcall	.-74     	; 0x13f4 <LCD_writeString>
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <LCD_displayClear>:
}

void LCD_displayClear()
{
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);   // LCD_Display_Clear   0x01
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	9e cf       	rjmp	.-196    	; 0x1384 <LCD_writeCmdData>
    1448:	08 95       	ret

0000144a <Motor_init>:
﻿#include "Motor.h"

void Motor_init()
{
	Gpio_initPin(&DDRE, 3, OUTPUT);
    144a:	41 e0       	ldi	r20, 0x01	; 1
    144c:	63 e0       	ldi	r22, 0x03	; 3
    144e:	82 e2       	ldi	r24, 0x22	; 34
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	48 d1       	rcall	.+656    	; 0x16e4 <Gpio_initPin>
	
	// TIM3, Top ICR, DutyCycle OCR3A
	// Prescaler 1/64
	TCCR3B |= (0<<CS32) | (1<<CS31) | (1<<CS30);
    1454:	ea e8       	ldi	r30, 0x8A	; 138
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	83 60       	ori	r24, 0x03	; 3
    145c:	80 83       	st	Z, r24
	
	//fast PWM mode, TOP : ICR
	TCCR3B |= (1<<WGM33) | (1<<WGM32);
    145e:	80 81       	ld	r24, Z
    1460:	88 61       	ori	r24, 0x18	; 24
    1462:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM31) | (0<<WGM30);
    1464:	eb e8       	ldi	r30, 0x8B	; 139
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	82 60       	ori	r24, 0x02	; 2
    146c:	80 83       	st	Z, r24
    146e:	08 95       	ret

00001470 <Motor_On>:
}

void Motor_On()
{
	// Non-Inverting Mode
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0);
    1470:	eb e8       	ldi	r30, 0x8B	; 139
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 68       	ori	r24, 0x80	; 128
    1478:	80 83       	st	Z, r24
    147a:	08 95       	ret

0000147c <Motor_Off>:
}

void Motor_Off()
{
	// 모터 PWM 비활성화
	TCCR3A &= ~((1<<COM3A1) | (1<<COM3A0));
    147c:	eb e8       	ldi	r30, 0x8B	; 139
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8f 73       	andi	r24, 0x3F	; 63
    1484:	80 83       	st	Z, r24
    1486:	08 95       	ret

00001488 <Motor_makeHerz>:
}

void Motor_makeHerz(uint16_t herz, uint8_t speed)
{
    1488:	cf 93       	push	r28
    148a:	c6 2f       	mov	r28, r22
	if(herz < 100)
    148c:	84 36       	cpi	r24, 0x64	; 100
    148e:	91 05       	cpc	r25, r1
    1490:	d8 f0       	brcs	.+54     	; 0x14c8 <Motor_makeHerz+0x40>
	{
		herz = 100;
	}
	else if(herz > 4000)
    1492:	81 3a       	cpi	r24, 0xA1	; 161
    1494:	2f e0       	ldi	r18, 0x0F	; 15
    1496:	92 07       	cpc	r25, r18
    1498:	b8 f4       	brcc	.+46     	; 0x14c8 <Motor_makeHerz+0x40>
	{
		herz = 4000;
	}
	else
	{
		ICR3 = (250000/herz) - 1;
    149a:	9c 01       	movw	r18, r24
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	60 e9       	ldi	r22, 0x90	; 144
    14a2:	70 ed       	ldi	r23, 0xD0	; 208
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	ec d2       	rcall	.+1496   	; 0x1a82 <__divmodsi4>
    14aa:	21 50       	subi	r18, 0x01	; 1
    14ac:	31 09       	sbc	r19, r1
    14ae:	e0 e8       	ldi	r30, 0x80	; 128
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	31 83       	std	Z+1, r19	; 0x01
    14b4:	20 83       	st	Z, r18
		OCR3A = ICR3 / speed;
    14b6:	80 81       	ld	r24, Z
    14b8:	91 81       	ldd	r25, Z+1	; 0x01
    14ba:	6c 2f       	mov	r22, r28
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	ba d2       	rcall	.+1396   	; 0x1a34 <__udivmodhi4>
    14c0:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    14c4:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	}
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <Ultrasonic_init>:

uint8_t ultrasonicDistanceFlag;

void Ultrasonic_init()
{
	ultrasonicDistanceFlag = 0;
    14cc:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <ultrasonicDistanceFlag>
	// Pin init
	USONIC_DDR &= ~(1<<USONIC_ECHO);	// echo INPUT
    14d0:	81 b3       	in	r24, 0x11	; 17
    14d2:	8b 7f       	andi	r24, 0xFB	; 251
    14d4:	81 bb       	out	0x11, r24	; 17
	USONIC_DDR |= (1<<USONIC_TRIG);	// trigger OUTPUT
    14d6:	81 b3       	in	r24, 0x11	; 17
    14d8:	88 60       	ori	r24, 0x08	; 8
    14da:	81 bb       	out	0x11, r24	; 17
	
	// INT2
	EICRA |= (1<<ISC21) | (1<<ISC20);	// Rising Edge Interrupt Enable
    14dc:	ea e6       	ldi	r30, 0x6A	; 106
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 63       	ori	r24, 0x30	; 48
    14e4:	80 83       	st	Z, r24
	EIMSK |= (1<<INT2);
    14e6:	89 b7       	in	r24, 0x39	; 57
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	89 bf       	out	0x39, r24	; 57
    14ec:	08 95       	ret

000014ee <Ultrasonic_trigger>:
}

void Ultrasonic_trigger()
{
	USONIC_PORT |= (1<<USONIC_TRIG);
    14ee:	82 b3       	in	r24, 0x12	; 18
    14f0:	88 60       	ori	r24, 0x08	; 8
    14f2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14f4:	85 e3       	ldi	r24, 0x35	; 53
    14f6:	8a 95       	dec	r24
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <Ultrasonic_trigger+0x8>
    14fa:	00 00       	nop
	_delay_us(10);
	USONIC_PORT &= ~(1<<USONIC_TRIG);
    14fc:	82 b3       	in	r24, 0x12	; 18
    14fe:	87 7f       	andi	r24, 0xF7	; 247
    1500:	82 bb       	out	0x12, r24	; 18
    1502:	08 95       	ret

00001504 <Ultrasonic_getDistance>:
}

uint16_t Ultrasonic_getDistance()
{
	// 1/64
	return USONIC_TCNT * 0.068;
    1504:	6c b5       	in	r22, 0x2c	; 44
    1506:	7d b5       	in	r23, 0x2d	; 45
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a2 d1       	rcall	.+836    	; 0x1852 <__floatunsisf>
    150e:	26 e9       	ldi	r18, 0x96	; 150
    1510:	33 e4       	ldi	r19, 0x43	; 67
    1512:	4b e8       	ldi	r20, 0x8B	; 139
    1514:	5d e3       	ldi	r21, 0x3D	; 61
    1516:	03 d2       	rcall	.+1030   	; 0x191e <__mulsf3>
    1518:	70 d1       	rcall	.+736    	; 0x17fa <__fixunssfsi>
}
    151a:	cb 01       	movw	r24, r22
    151c:	08 95       	ret

0000151e <Ultrasonic_timerStart>:

void Ultrasonic_timerStart()
{
	USONIC_TCNT = 0;
    151e:	1d bc       	out	0x2d, r1	; 45
    1520:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (0<<CS12) | (1<<CS11) | (1<<CS10);
    1522:	8e b5       	in	r24, 0x2e	; 46
    1524:	83 60       	ori	r24, 0x03	; 3
    1526:	8e bd       	out	0x2e, r24	; 46
    1528:	08 95       	ret

0000152a <Ultrasonic_timerStop>:
}

void Ultrasonic_timerStop()
{
	TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
    152a:	8e b5       	in	r24, 0x2e	; 46
    152c:	88 7f       	andi	r24, 0xF8	; 248
    152e:	8e bd       	out	0x2e, r24	; 46
    1530:	08 95       	ret

00001532 <Ultrasonic_setFlag>:
}

void Ultrasonic_setFlag()
{
	ultrasonicDistanceFlag = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <ultrasonicDistanceFlag>
    1538:	08 95       	ret

0000153a <Ultrasonic_clearFlag>:
}

void Ultrasonic_clearFlag()
{
	ultrasonicDistanceFlag = 0;
    153a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <ultrasonicDistanceFlag>
    153e:	08 95       	ret

00001540 <Ultrasonic_getFlag>:
}

uint8_t Ultrasonic_getFlag()
{
	return ultrasonicDistanceFlag;
}
    1540:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <ultrasonicDistanceFlag>
    1544:	08 95       	ret

00001546 <Ultrasonic_switchInterrupt>:

void Ultrasonic_switchInterrupt(uint8_t swtichState)
{
	if(swtichState == FALLING_EDGE)
    1546:	81 11       	cpse	r24, r1
    1548:	09 c0       	rjmp	.+18     	; 0x155c <Ultrasonic_switchInterrupt+0x16>
	{
		// next FALLING_EDGE
		EICRA &= ~((1<<ISC21) | (1<<ISC20));
    154a:	ea e6       	ldi	r30, 0x6A	; 106
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 7c       	andi	r24, 0xCF	; 207
    1552:	80 83       	st	Z, r24
		EICRA |= (1<<ISC21) | (0<<ISC20);
    1554:	80 81       	ld	r24, Z
    1556:	80 62       	ori	r24, 0x20	; 32
    1558:	80 83       	st	Z, r24
    155a:	08 95       	ret
	}
	else
	{
		// next RISING_EDGE
		EICRA &= ~((1<<ISC21) | (1<<ISC20));
    155c:	ea e6       	ldi	r30, 0x6A	; 106
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8f 7c       	andi	r24, 0xCF	; 207
    1564:	80 83       	st	Z, r24
		EICRA |= (1<<ISC21) | (1<<ISC20);
    1566:	80 81       	ld	r24, Z
    1568:	80 63       	ori	r24, 0x30	; 48
    156a:	80 83       	st	Z, r24
    156c:	08 95       	ret

0000156e <Ultrasonic_ISR_Process>:
	}
}

void Ultrasonic_ISR_Process()
{
	if(USONIC_PIN & (1<<USONIC_ECHO))
    156e:	82 9b       	sbis	0x10, 2	; 16
    1570:	04 c0       	rjmp	.+8      	; 0x157a <Ultrasonic_ISR_Process+0xc>
	{
		Ultrasonic_timerStart();
    1572:	d5 df       	rcall	.-86     	; 0x151e <Ultrasonic_timerStart>
		Ultrasonic_switchInterrupt(FALLING_EDGE);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	e7 cf       	rjmp	.-50     	; 0x1546 <Ultrasonic_switchInterrupt>
	}
	else
	{
		Ultrasonic_timerStop();
    1578:	08 95       	ret
		Ultrasonic_setFlag();
    157a:	d7 df       	rcall	.-82     	; 0x152a <Ultrasonic_timerStop>
    157c:	da df       	rcall	.-76     	; 0x1532 <Ultrasonic_setFlag>
		Ultrasonic_switchInterrupt(RISING_EDGE);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	e2 cf       	rjmp	.-60     	; 0x1546 <Ultrasonic_switchInterrupt>
    1582:	08 95       	ret

00001584 <__vector_16>:
    1584:	1f 92       	push	r1
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ap/fan/fan.h"

ISR(TIMER0_OVF_vect)
{
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	0b b6       	in	r0, 0x3b	; 59
    1590:	0f 92       	push	r0
    1592:	2f 93       	push	r18
    1594:	3f 93       	push	r19
    1596:	4f 93       	push	r20
    1598:	5f 93       	push	r21
    159a:	6f 93       	push	r22
    159c:	7f 93       	push	r23
    159e:	8f 93       	push	r24
    15a0:	9f 93       	push	r25
    15a2:	af 93       	push	r26
    15a4:	bf 93       	push	r27
    15a6:	ef 93       	push	r30
    15a8:	ff 93       	push	r31
	fan_FND_ISR_Process();
    15aa:	0e 94 b4 01 	call	0x368	; 0x368 <fan_FND_ISR_Process>
	TCNT0 = 130;
    15ae:	82 e8       	ldi	r24, 0x82	; 130
    15b0:	82 bf       	out	0x32, r24	; 50
}
    15b2:	ff 91       	pop	r31
    15b4:	ef 91       	pop	r30
    15b6:	bf 91       	pop	r27
    15b8:	af 91       	pop	r26
    15ba:	9f 91       	pop	r25
    15bc:	8f 91       	pop	r24
    15be:	7f 91       	pop	r23
    15c0:	6f 91       	pop	r22
    15c2:	5f 91       	pop	r21
    15c4:	4f 91       	pop	r20
    15c6:	3f 91       	pop	r19
    15c8:	2f 91       	pop	r18
    15ca:	0f 90       	pop	r0
    15cc:	0b be       	out	0x3b, r0	; 59
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_3>:

ISR(INT2_vect)
{
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	0b b6       	in	r0, 0x3b	; 59
    15e4:	0f 92       	push	r0
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
	fan_Ultrasonic_ISR_Process();
    15fe:	0e 94 b1 01 	call	0x362	; 0x362 <fan_Ultrasonic_ISR_Process>
}
    1602:	ff 91       	pop	r31
    1604:	ef 91       	pop	r30
    1606:	bf 91       	pop	r27
    1608:	af 91       	pop	r26
    160a:	9f 91       	pop	r25
    160c:	8f 91       	pop	r24
    160e:	7f 91       	pop	r23
    1610:	6f 91       	pop	r22
    1612:	5f 91       	pop	r21
    1614:	4f 91       	pop	r20
    1616:	3f 91       	pop	r19
    1618:	2f 91       	pop	r18
    161a:	0f 90       	pop	r0
    161c:	0b be       	out	0x3b, r0	; 59
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	0f 90       	pop	r0
    1624:	1f 90       	pop	r1
    1626:	18 95       	reti

00001628 <__vector_9>:

ISR(TIMER2_COMP_vect)
{
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	0b b6       	in	r0, 0x3b	; 59
    1634:	0f 92       	push	r0
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
	fan_Timer_incMilisec();
    164e:	0e 94 66 00 	call	0xcc	; 0xcc <fan_Timer_incMilisec>
}
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0b be       	out	0x3b, r0	; 59
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <__vector_18>:

ISR(USART0_RX_vect)
{
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	0b b6       	in	r0, 0x3b	; 59
    1684:	0f 92       	push	r0
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	6f 93       	push	r22
    1690:	7f 93       	push	r23
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31
	fan_UART0_ISR_Process();
    169e:	0e 94 b6 01 	call	0x36c	; 0x36c <fan_UART0_ISR_Process>
}
    16a2:	ff 91       	pop	r31
    16a4:	ef 91       	pop	r30
    16a6:	bf 91       	pop	r27
    16a8:	af 91       	pop	r26
    16aa:	9f 91       	pop	r25
    16ac:	8f 91       	pop	r24
    16ae:	7f 91       	pop	r23
    16b0:	6f 91       	pop	r22
    16b2:	5f 91       	pop	r21
    16b4:	4f 91       	pop	r20
    16b6:	3f 91       	pop	r19
    16b8:	2f 91       	pop	r18
    16ba:	0f 90       	pop	r0
    16bc:	0b be       	out	0x3b, r0	; 59
    16be:	0f 90       	pop	r0
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	0f 90       	pop	r0
    16c4:	1f 90       	pop	r1
    16c6:	18 95       	reti

000016c8 <main>:

int main(void)
{
	fan_init();
    16c8:	0e 94 35 01 	call	0x26a	; 0x26a <fan_init>

	sei();
    16cc:	78 94       	sei

	while (1)
	{
		fan_run();
    16ce:	49 dc       	rcall	.-1902   	; 0xf62 <fan_run>
    16d0:	fe cf       	rjmp	.-4      	; 0x16ce <main+0x6>

000016d2 <Gpio_initPort>:

// PIN port
uint8_t Gpio_readPort(volatile uint8_t *PIN)
{
	return *PIN;
}
    16d2:	61 30       	cpi	r22, 0x01	; 1
    16d4:	21 f4       	brne	.+8      	; 0x16de <Gpio_initPort+0xc>
    16d6:	2f ef       	ldi	r18, 0xFF	; 255
    16d8:	fc 01       	movw	r30, r24
    16da:	20 83       	st	Z, r18
    16dc:	08 95       	ret
    16de:	fc 01       	movw	r30, r24
    16e0:	10 82       	st	Z, r1
    16e2:	08 95       	ret

000016e4 <Gpio_initPin>:
    16e4:	fc 01       	movw	r30, r24
    16e6:	41 30       	cpi	r20, 0x01	; 1
    16e8:	59 f4       	brne	.+22     	; 0x1700 <Gpio_initPin+0x1c>
    16ea:	20 81       	ld	r18, Z
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <Gpio_initPin+0x12>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	6a 95       	dec	r22
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <Gpio_initPin+0xe>
    16fa:	82 2b       	or	r24, r18
    16fc:	80 83       	st	Z, r24
    16fe:	08 95       	ret
    1700:	90 81       	ld	r25, Z
    1702:	21 e0       	ldi	r18, 0x01	; 1
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <Gpio_initPin+0x28>
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	6a 95       	dec	r22
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <Gpio_initPin+0x24>
    1710:	20 95       	com	r18
    1712:	29 23       	and	r18, r25
    1714:	20 83       	st	Z, r18
    1716:	08 95       	ret

00001718 <Gpio_writePort>:
    1718:	fc 01       	movw	r30, r24
    171a:	60 83       	st	Z, r22
    171c:	08 95       	ret

0000171e <Gpio_writePin>:
    171e:	fc 01       	movw	r30, r24
    1720:	41 30       	cpi	r20, 0x01	; 1
    1722:	59 f4       	brne	.+22     	; 0x173a <Gpio_writePin+0x1c>
    1724:	20 81       	ld	r18, Z
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <Gpio_writePin+0x12>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	6a 95       	dec	r22
    1732:	e2 f7       	brpl	.-8      	; 0x172c <Gpio_writePin+0xe>
    1734:	82 2b       	or	r24, r18
    1736:	80 83       	st	Z, r24
    1738:	08 95       	ret
    173a:	90 81       	ld	r25, Z
    173c:	21 e0       	ldi	r18, 0x01	; 1
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <Gpio_writePin+0x28>
    1742:	22 0f       	add	r18, r18
    1744:	33 1f       	adc	r19, r19
    1746:	6a 95       	dec	r22
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <Gpio_writePin+0x24>
    174a:	20 95       	com	r18
    174c:	29 23       	and	r18, r25
    174e:	20 83       	st	Z, r18
    1750:	08 95       	ret

00001752 <Gpio_readPin>:

// PIN pin
uint8_t Gpio_readPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0);
    1752:	fc 01       	movw	r30, r24
    1754:	80 81       	ld	r24, Z
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <Gpio_readPin+0xc>
    175a:	95 95       	asr	r25
    175c:	87 95       	ror	r24
    175e:	6a 95       	dec	r22
    1760:	e2 f7       	brpl	.-8      	; 0x175a <Gpio_readPin+0x8>
    1762:	81 70       	andi	r24, 0x01	; 1
    1764:	08 95       	ret

00001766 <TIM0_init>:
﻿#include "TIM.h"

// 1ms Timer/Counter Overflow Interrupt init
void TIM0_init()
{
	TCCR0 |= ((1<<CS02) | (0<<CS01) | (1<<CS00));
    1766:	83 b7       	in	r24, 0x33	; 51
    1768:	85 60       	ori	r24, 0x05	; 5
    176a:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
    176c:	87 b7       	in	r24, 0x37	; 55
    176e:	81 60       	ori	r24, 0x01	; 1
    1770:	87 bf       	out	0x37, r24	; 55
	
	TCNT0 = 130;
    1772:	82 e8       	ldi	r24, 0x82	; 130
    1774:	82 bf       	out	0x32, r24	; 50
    1776:	08 95       	ret

00001778 <TIM2_init>:

// 1ms Timer/Counter Output Compare Match Interrupt init
void TIM2_init()
{
	// PreScaler / 64
	TCCR2 |= (0<<CS22) | (1<<CS21) | (1<<CS20);
    1778:	85 b5       	in	r24, 0x25	; 37
    177a:	83 60       	ori	r24, 0x03	; 3
    177c:	85 bd       	out	0x25, r24	; 37
	// CTC mode Enable
	TCCR2 |= (1<<WGM21) | (0<<WGM20);
    177e:	85 b5       	in	r24, 0x25	; 37
    1780:	88 60       	ori	r24, 0x08	; 8
    1782:	85 bd       	out	0x25, r24	; 37
	// TIMSK Compare Match Interrupt Enable
	TIMSK |= (1<<OCIE2);
    1784:	87 b7       	in	r24, 0x37	; 55
    1786:	80 68       	ori	r24, 0x80	; 128
    1788:	87 bf       	out	0x37, r24	; 55
	OCR2 = 250 - 1;
    178a:	89 ef       	ldi	r24, 0xF9	; 249
    178c:	83 bd       	out	0x23, r24	; 35
    178e:	08 95       	ret

00001790 <UART0_init>:
	uart0RxFlag = 0;
}

void UART0_setRxFlag()
{
	uart0RxFlag = 1;
    1790:	8a b1       	in	r24, 0x0a	; 10
    1792:	88 61       	ori	r24, 0x18	; 24
    1794:	8a b9       	out	0x0a, r24	; 10
    1796:	8b b1       	in	r24, 0x0b	; 11
    1798:	82 60       	ori	r24, 0x02	; 2
    179a:	8b b9       	out	0x0b, r24	; 11
    179c:	8a b1       	in	r24, 0x0a	; 10
    179e:	80 68       	ori	r24, 0x80	; 128
    17a0:	8a b9       	out	0x0a, r24	; 10
    17a2:	8f ec       	ldi	r24, 0xCF	; 207
    17a4:	89 b9       	out	0x09, r24	; 9
    17a6:	08 95       	ret

000017a8 <UART0_ISR_Process>:
    17a8:	9c b1       	in	r25, 0x0c	; 12
    17aa:	9a 30       	cpi	r25, 0x0A	; 10
    17ac:	91 f4       	brne	.+36     	; 0x17d2 <UART0_ISR_Process+0x2a>
    17ae:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <uart0RxTail.1768>
    17b2:	ae 2f       	mov	r26, r30
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	a4 5d       	subi	r26, 0xD4	; 212
    17b8:	bd 4f       	sbci	r27, 0xFD	; 253
    17ba:	9c 93       	st	X, r25
    17bc:	ef 5f       	subi	r30, 0xFF	; 255
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	e4 5d       	subi	r30, 0xD4	; 212
    17c2:	fd 4f       	sbci	r31, 0xFD	; 253
    17c4:	10 82       	st	Z, r1
    17c6:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <uart0RxTail.1768>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <uart0RxFlag>
    17d0:	08 95       	ret
    17d2:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <uart0RxTail.1768>
    17d6:	e8 2f       	mov	r30, r24
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	e4 5d       	subi	r30, 0xD4	; 212
    17dc:	fd 4f       	sbci	r31, 0xFD	; 253
    17de:	90 83       	st	Z, r25
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <uart0RxTail.1768>
    17e6:	08 95       	ret

000017e8 <UART0_getRxFlag>:
    17e8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <uart0RxFlag>
    17ec:	08 95       	ret

000017ee <UART0_clearRxFlag>:
    17ee:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <uart0RxFlag>
    17f2:	08 95       	ret

000017f4 <UART0_getRxBuff>:
}

uint8_t* UART0_getRxBuff()
{
	return uart0RxBuff;
    17f4:	8c e2       	ldi	r24, 0x2C	; 44
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	08 95       	ret

000017fa <__fixunssfsi>:
    17fa:	70 d0       	rcall	.+224    	; 0x18dc <__fp_splitA>
    17fc:	88 f0       	brcs	.+34     	; 0x1820 <__fixunssfsi+0x26>
    17fe:	9f 57       	subi	r25, 0x7F	; 127
    1800:	90 f0       	brcs	.+36     	; 0x1826 <__fixunssfsi+0x2c>
    1802:	b9 2f       	mov	r27, r25
    1804:	99 27       	eor	r25, r25
    1806:	b7 51       	subi	r27, 0x17	; 23
    1808:	a0 f0       	brcs	.+40     	; 0x1832 <__fixunssfsi+0x38>
    180a:	d1 f0       	breq	.+52     	; 0x1840 <__fixunssfsi+0x46>
    180c:	66 0f       	add	r22, r22
    180e:	77 1f       	adc	r23, r23
    1810:	88 1f       	adc	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	1a f0       	brmi	.+6      	; 0x181c <__fixunssfsi+0x22>
    1816:	ba 95       	dec	r27
    1818:	c9 f7       	brne	.-14     	; 0x180c <__fixunssfsi+0x12>
    181a:	12 c0       	rjmp	.+36     	; 0x1840 <__fixunssfsi+0x46>
    181c:	b1 30       	cpi	r27, 0x01	; 1
    181e:	81 f0       	breq	.+32     	; 0x1840 <__fixunssfsi+0x46>
    1820:	77 d0       	rcall	.+238    	; 0x1910 <__fp_zero>
    1822:	b1 e0       	ldi	r27, 0x01	; 1
    1824:	08 95       	ret
    1826:	74 c0       	rjmp	.+232    	; 0x1910 <__fp_zero>
    1828:	67 2f       	mov	r22, r23
    182a:	78 2f       	mov	r23, r24
    182c:	88 27       	eor	r24, r24
    182e:	b8 5f       	subi	r27, 0xF8	; 248
    1830:	39 f0       	breq	.+14     	; 0x1840 <__fixunssfsi+0x46>
    1832:	b9 3f       	cpi	r27, 0xF9	; 249
    1834:	cc f3       	brlt	.-14     	; 0x1828 <__fixunssfsi+0x2e>
    1836:	86 95       	lsr	r24
    1838:	77 95       	ror	r23
    183a:	67 95       	ror	r22
    183c:	b3 95       	inc	r27
    183e:	d9 f7       	brne	.-10     	; 0x1836 <__fixunssfsi+0x3c>
    1840:	3e f4       	brtc	.+14     	; 0x1850 <__fixunssfsi+0x56>
    1842:	90 95       	com	r25
    1844:	80 95       	com	r24
    1846:	70 95       	com	r23
    1848:	61 95       	neg	r22
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	8f 4f       	sbci	r24, 0xFF	; 255
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	08 95       	ret

00001852 <__floatunsisf>:
    1852:	e8 94       	clt
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <__floatsisf+0x12>

00001856 <__floatsisf>:
    1856:	97 fb       	bst	r25, 7
    1858:	3e f4       	brtc	.+14     	; 0x1868 <__floatsisf+0x12>
    185a:	90 95       	com	r25
    185c:	80 95       	com	r24
    185e:	70 95       	com	r23
    1860:	61 95       	neg	r22
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	8f 4f       	sbci	r24, 0xFF	; 255
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	99 23       	and	r25, r25
    186a:	a9 f0       	breq	.+42     	; 0x1896 <__floatsisf+0x40>
    186c:	f9 2f       	mov	r31, r25
    186e:	96 e9       	ldi	r25, 0x96	; 150
    1870:	bb 27       	eor	r27, r27
    1872:	93 95       	inc	r25
    1874:	f6 95       	lsr	r31
    1876:	87 95       	ror	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	b7 95       	ror	r27
    187e:	f1 11       	cpse	r31, r1
    1880:	f8 cf       	rjmp	.-16     	; 0x1872 <__floatsisf+0x1c>
    1882:	fa f4       	brpl	.+62     	; 0x18c2 <__floatsisf+0x6c>
    1884:	bb 0f       	add	r27, r27
    1886:	11 f4       	brne	.+4      	; 0x188c <__floatsisf+0x36>
    1888:	60 ff       	sbrs	r22, 0
    188a:	1b c0       	rjmp	.+54     	; 0x18c2 <__floatsisf+0x6c>
    188c:	6f 5f       	subi	r22, 0xFF	; 255
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	8f 4f       	sbci	r24, 0xFF	; 255
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	16 c0       	rjmp	.+44     	; 0x18c2 <__floatsisf+0x6c>
    1896:	88 23       	and	r24, r24
    1898:	11 f0       	breq	.+4      	; 0x189e <__floatsisf+0x48>
    189a:	96 e9       	ldi	r25, 0x96	; 150
    189c:	11 c0       	rjmp	.+34     	; 0x18c0 <__floatsisf+0x6a>
    189e:	77 23       	and	r23, r23
    18a0:	21 f0       	breq	.+8      	; 0x18aa <__floatsisf+0x54>
    18a2:	9e e8       	ldi	r25, 0x8E	; 142
    18a4:	87 2f       	mov	r24, r23
    18a6:	76 2f       	mov	r23, r22
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <__floatsisf+0x5e>
    18aa:	66 23       	and	r22, r22
    18ac:	71 f0       	breq	.+28     	; 0x18ca <__floatsisf+0x74>
    18ae:	96 e8       	ldi	r25, 0x86	; 134
    18b0:	86 2f       	mov	r24, r22
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	2a f0       	brmi	.+10     	; 0x18c2 <__floatsisf+0x6c>
    18b8:	9a 95       	dec	r25
    18ba:	66 0f       	add	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	88 1f       	adc	r24, r24
    18c0:	da f7       	brpl	.-10     	; 0x18b8 <__floatsisf+0x62>
    18c2:	88 0f       	add	r24, r24
    18c4:	96 95       	lsr	r25
    18c6:	87 95       	ror	r24
    18c8:	97 f9       	bld	r25, 7
    18ca:	08 95       	ret

000018cc <__fp_split3>:
    18cc:	57 fd       	sbrc	r21, 7
    18ce:	90 58       	subi	r25, 0x80	; 128
    18d0:	44 0f       	add	r20, r20
    18d2:	55 1f       	adc	r21, r21
    18d4:	59 f0       	breq	.+22     	; 0x18ec <__fp_splitA+0x10>
    18d6:	5f 3f       	cpi	r21, 0xFF	; 255
    18d8:	71 f0       	breq	.+28     	; 0x18f6 <__fp_splitA+0x1a>
    18da:	47 95       	ror	r20

000018dc <__fp_splitA>:
    18dc:	88 0f       	add	r24, r24
    18de:	97 fb       	bst	r25, 7
    18e0:	99 1f       	adc	r25, r25
    18e2:	61 f0       	breq	.+24     	; 0x18fc <__fp_splitA+0x20>
    18e4:	9f 3f       	cpi	r25, 0xFF	; 255
    18e6:	79 f0       	breq	.+30     	; 0x1906 <__fp_splitA+0x2a>
    18e8:	87 95       	ror	r24
    18ea:	08 95       	ret
    18ec:	12 16       	cp	r1, r18
    18ee:	13 06       	cpc	r1, r19
    18f0:	14 06       	cpc	r1, r20
    18f2:	55 1f       	adc	r21, r21
    18f4:	f2 cf       	rjmp	.-28     	; 0x18da <__fp_split3+0xe>
    18f6:	46 95       	lsr	r20
    18f8:	f1 df       	rcall	.-30     	; 0x18dc <__fp_splitA>
    18fa:	08 c0       	rjmp	.+16     	; 0x190c <__fp_splitA+0x30>
    18fc:	16 16       	cp	r1, r22
    18fe:	17 06       	cpc	r1, r23
    1900:	18 06       	cpc	r1, r24
    1902:	99 1f       	adc	r25, r25
    1904:	f1 cf       	rjmp	.-30     	; 0x18e8 <__fp_splitA+0xc>
    1906:	86 95       	lsr	r24
    1908:	71 05       	cpc	r23, r1
    190a:	61 05       	cpc	r22, r1
    190c:	08 94       	sec
    190e:	08 95       	ret

00001910 <__fp_zero>:
    1910:	e8 94       	clt

00001912 <__fp_szero>:
    1912:	bb 27       	eor	r27, r27
    1914:	66 27       	eor	r22, r22
    1916:	77 27       	eor	r23, r23
    1918:	cb 01       	movw	r24, r22
    191a:	97 f9       	bld	r25, 7
    191c:	08 95       	ret

0000191e <__mulsf3>:
    191e:	0b d0       	rcall	.+22     	; 0x1936 <__mulsf3x>
    1920:	78 c0       	rjmp	.+240    	; 0x1a12 <__fp_round>
    1922:	69 d0       	rcall	.+210    	; 0x19f6 <__fp_pscA>
    1924:	28 f0       	brcs	.+10     	; 0x1930 <__mulsf3+0x12>
    1926:	6e d0       	rcall	.+220    	; 0x1a04 <__fp_pscB>
    1928:	18 f0       	brcs	.+6      	; 0x1930 <__mulsf3+0x12>
    192a:	95 23       	and	r25, r21
    192c:	09 f0       	breq	.+2      	; 0x1930 <__mulsf3+0x12>
    192e:	5a c0       	rjmp	.+180    	; 0x19e4 <__fp_inf>
    1930:	5f c0       	rjmp	.+190    	; 0x19f0 <__fp_nan>
    1932:	11 24       	eor	r1, r1
    1934:	ee cf       	rjmp	.-36     	; 0x1912 <__fp_szero>

00001936 <__mulsf3x>:
    1936:	ca df       	rcall	.-108    	; 0x18cc <__fp_split3>
    1938:	a0 f3       	brcs	.-24     	; 0x1922 <__mulsf3+0x4>

0000193a <__mulsf3_pse>:
    193a:	95 9f       	mul	r25, r21
    193c:	d1 f3       	breq	.-12     	; 0x1932 <__mulsf3+0x14>
    193e:	95 0f       	add	r25, r21
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	55 1f       	adc	r21, r21
    1944:	62 9f       	mul	r22, r18
    1946:	f0 01       	movw	r30, r0
    1948:	72 9f       	mul	r23, r18
    194a:	bb 27       	eor	r27, r27
    194c:	f0 0d       	add	r31, r0
    194e:	b1 1d       	adc	r27, r1
    1950:	63 9f       	mul	r22, r19
    1952:	aa 27       	eor	r26, r26
    1954:	f0 0d       	add	r31, r0
    1956:	b1 1d       	adc	r27, r1
    1958:	aa 1f       	adc	r26, r26
    195a:	64 9f       	mul	r22, r20
    195c:	66 27       	eor	r22, r22
    195e:	b0 0d       	add	r27, r0
    1960:	a1 1d       	adc	r26, r1
    1962:	66 1f       	adc	r22, r22
    1964:	82 9f       	mul	r24, r18
    1966:	22 27       	eor	r18, r18
    1968:	b0 0d       	add	r27, r0
    196a:	a1 1d       	adc	r26, r1
    196c:	62 1f       	adc	r22, r18
    196e:	73 9f       	mul	r23, r19
    1970:	b0 0d       	add	r27, r0
    1972:	a1 1d       	adc	r26, r1
    1974:	62 1f       	adc	r22, r18
    1976:	83 9f       	mul	r24, r19
    1978:	a0 0d       	add	r26, r0
    197a:	61 1d       	adc	r22, r1
    197c:	22 1f       	adc	r18, r18
    197e:	74 9f       	mul	r23, r20
    1980:	33 27       	eor	r19, r19
    1982:	a0 0d       	add	r26, r0
    1984:	61 1d       	adc	r22, r1
    1986:	23 1f       	adc	r18, r19
    1988:	84 9f       	mul	r24, r20
    198a:	60 0d       	add	r22, r0
    198c:	21 1d       	adc	r18, r1
    198e:	82 2f       	mov	r24, r18
    1990:	76 2f       	mov	r23, r22
    1992:	6a 2f       	mov	r22, r26
    1994:	11 24       	eor	r1, r1
    1996:	9f 57       	subi	r25, 0x7F	; 127
    1998:	50 40       	sbci	r21, 0x00	; 0
    199a:	8a f0       	brmi	.+34     	; 0x19be <__mulsf3_pse+0x84>
    199c:	e1 f0       	breq	.+56     	; 0x19d6 <__mulsf3_pse+0x9c>
    199e:	88 23       	and	r24, r24
    19a0:	4a f0       	brmi	.+18     	; 0x19b4 <__mulsf3_pse+0x7a>
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	bb 1f       	adc	r27, r27
    19a8:	66 1f       	adc	r22, r22
    19aa:	77 1f       	adc	r23, r23
    19ac:	88 1f       	adc	r24, r24
    19ae:	91 50       	subi	r25, 0x01	; 1
    19b0:	50 40       	sbci	r21, 0x00	; 0
    19b2:	a9 f7       	brne	.-22     	; 0x199e <__mulsf3_pse+0x64>
    19b4:	9e 3f       	cpi	r25, 0xFE	; 254
    19b6:	51 05       	cpc	r21, r1
    19b8:	70 f0       	brcs	.+28     	; 0x19d6 <__mulsf3_pse+0x9c>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <__fp_inf>
    19bc:	aa cf       	rjmp	.-172    	; 0x1912 <__fp_szero>
    19be:	5f 3f       	cpi	r21, 0xFF	; 255
    19c0:	ec f3       	brlt	.-6      	; 0x19bc <__mulsf3_pse+0x82>
    19c2:	98 3e       	cpi	r25, 0xE8	; 232
    19c4:	dc f3       	brlt	.-10     	; 0x19bc <__mulsf3_pse+0x82>
    19c6:	86 95       	lsr	r24
    19c8:	77 95       	ror	r23
    19ca:	67 95       	ror	r22
    19cc:	b7 95       	ror	r27
    19ce:	f7 95       	ror	r31
    19d0:	e7 95       	ror	r30
    19d2:	9f 5f       	subi	r25, 0xFF	; 255
    19d4:	c1 f7       	brne	.-16     	; 0x19c6 <__mulsf3_pse+0x8c>
    19d6:	fe 2b       	or	r31, r30
    19d8:	88 0f       	add	r24, r24
    19da:	91 1d       	adc	r25, r1
    19dc:	96 95       	lsr	r25
    19de:	87 95       	ror	r24
    19e0:	97 f9       	bld	r25, 7
    19e2:	08 95       	ret

000019e4 <__fp_inf>:
    19e4:	97 f9       	bld	r25, 7
    19e6:	9f 67       	ori	r25, 0x7F	; 127
    19e8:	80 e8       	ldi	r24, 0x80	; 128
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	08 95       	ret

000019f0 <__fp_nan>:
    19f0:	9f ef       	ldi	r25, 0xFF	; 255
    19f2:	80 ec       	ldi	r24, 0xC0	; 192
    19f4:	08 95       	ret

000019f6 <__fp_pscA>:
    19f6:	00 24       	eor	r0, r0
    19f8:	0a 94       	dec	r0
    19fa:	16 16       	cp	r1, r22
    19fc:	17 06       	cpc	r1, r23
    19fe:	18 06       	cpc	r1, r24
    1a00:	09 06       	cpc	r0, r25
    1a02:	08 95       	ret

00001a04 <__fp_pscB>:
    1a04:	00 24       	eor	r0, r0
    1a06:	0a 94       	dec	r0
    1a08:	12 16       	cp	r1, r18
    1a0a:	13 06       	cpc	r1, r19
    1a0c:	14 06       	cpc	r1, r20
    1a0e:	05 06       	cpc	r0, r21
    1a10:	08 95       	ret

00001a12 <__fp_round>:
    1a12:	09 2e       	mov	r0, r25
    1a14:	03 94       	inc	r0
    1a16:	00 0c       	add	r0, r0
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <__fp_round+0xc>
    1a1a:	88 23       	and	r24, r24
    1a1c:	52 f0       	brmi	.+20     	; 0x1a32 <__fp_round+0x20>
    1a1e:	bb 0f       	add	r27, r27
    1a20:	40 f4       	brcc	.+16     	; 0x1a32 <__fp_round+0x20>
    1a22:	bf 2b       	or	r27, r31
    1a24:	11 f4       	brne	.+4      	; 0x1a2a <__fp_round+0x18>
    1a26:	60 ff       	sbrs	r22, 0
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <__fp_round+0x20>
    1a2a:	6f 5f       	subi	r22, 0xFF	; 255
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	08 95       	ret

00001a34 <__udivmodhi4>:
    1a34:	aa 1b       	sub	r26, r26
    1a36:	bb 1b       	sub	r27, r27
    1a38:	51 e1       	ldi	r21, 0x11	; 17
    1a3a:	07 c0       	rjmp	.+14     	; 0x1a4a <__udivmodhi4_ep>

00001a3c <__udivmodhi4_loop>:
    1a3c:	aa 1f       	adc	r26, r26
    1a3e:	bb 1f       	adc	r27, r27
    1a40:	a6 17       	cp	r26, r22
    1a42:	b7 07       	cpc	r27, r23
    1a44:	10 f0       	brcs	.+4      	; 0x1a4a <__udivmodhi4_ep>
    1a46:	a6 1b       	sub	r26, r22
    1a48:	b7 0b       	sbc	r27, r23

00001a4a <__udivmodhi4_ep>:
    1a4a:	88 1f       	adc	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	5a 95       	dec	r21
    1a50:	a9 f7       	brne	.-22     	; 0x1a3c <__udivmodhi4_loop>
    1a52:	80 95       	com	r24
    1a54:	90 95       	com	r25
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	08 95       	ret

00001a5c <__divmodhi4>:
    1a5c:	97 fb       	bst	r25, 7
    1a5e:	07 2e       	mov	r0, r23
    1a60:	16 f4       	brtc	.+4      	; 0x1a66 <__divmodhi4+0xa>
    1a62:	00 94       	com	r0
    1a64:	06 d0       	rcall	.+12     	; 0x1a72 <__divmodhi4_neg1>
    1a66:	77 fd       	sbrc	r23, 7
    1a68:	08 d0       	rcall	.+16     	; 0x1a7a <__divmodhi4_neg2>
    1a6a:	e4 df       	rcall	.-56     	; 0x1a34 <__udivmodhi4>
    1a6c:	07 fc       	sbrc	r0, 7
    1a6e:	05 d0       	rcall	.+10     	; 0x1a7a <__divmodhi4_neg2>
    1a70:	3e f4       	brtc	.+14     	; 0x1a80 <__divmodhi4_exit>

00001a72 <__divmodhi4_neg1>:
    1a72:	90 95       	com	r25
    1a74:	81 95       	neg	r24
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	08 95       	ret

00001a7a <__divmodhi4_neg2>:
    1a7a:	70 95       	com	r23
    1a7c:	61 95       	neg	r22
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255

00001a80 <__divmodhi4_exit>:
    1a80:	08 95       	ret

00001a82 <__divmodsi4>:
    1a82:	05 2e       	mov	r0, r21
    1a84:	97 fb       	bst	r25, 7
    1a86:	16 f4       	brtc	.+4      	; 0x1a8c <__divmodsi4+0xa>
    1a88:	00 94       	com	r0
    1a8a:	0f d0       	rcall	.+30     	; 0x1aaa <__negsi2>
    1a8c:	57 fd       	sbrc	r21, 7
    1a8e:	05 d0       	rcall	.+10     	; 0x1a9a <__divmodsi4_neg2>
    1a90:	23 d0       	rcall	.+70     	; 0x1ad8 <__udivmodsi4>
    1a92:	07 fc       	sbrc	r0, 7
    1a94:	02 d0       	rcall	.+4      	; 0x1a9a <__divmodsi4_neg2>
    1a96:	46 f4       	brtc	.+16     	; 0x1aa8 <__divmodsi4_exit>
    1a98:	08 c0       	rjmp	.+16     	; 0x1aaa <__negsi2>

00001a9a <__divmodsi4_neg2>:
    1a9a:	50 95       	com	r21
    1a9c:	40 95       	com	r20
    1a9e:	30 95       	com	r19
    1aa0:	21 95       	neg	r18
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa6:	5f 4f       	sbci	r21, 0xFF	; 255

00001aa8 <__divmodsi4_exit>:
    1aa8:	08 95       	ret

00001aaa <__negsi2>:
    1aaa:	90 95       	com	r25
    1aac:	80 95       	com	r24
    1aae:	70 95       	com	r23
    1ab0:	61 95       	neg	r22
    1ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab8:	08 95       	ret

00001aba <__umulhisi3>:
    1aba:	a2 9f       	mul	r26, r18
    1abc:	b0 01       	movw	r22, r0
    1abe:	b3 9f       	mul	r27, r19
    1ac0:	c0 01       	movw	r24, r0
    1ac2:	a3 9f       	mul	r26, r19
    1ac4:	70 0d       	add	r23, r0
    1ac6:	81 1d       	adc	r24, r1
    1ac8:	11 24       	eor	r1, r1
    1aca:	91 1d       	adc	r25, r1
    1acc:	b2 9f       	mul	r27, r18
    1ace:	70 0d       	add	r23, r0
    1ad0:	81 1d       	adc	r24, r1
    1ad2:	11 24       	eor	r1, r1
    1ad4:	91 1d       	adc	r25, r1
    1ad6:	08 95       	ret

00001ad8 <__udivmodsi4>:
    1ad8:	a1 e2       	ldi	r26, 0x21	; 33
    1ada:	1a 2e       	mov	r1, r26
    1adc:	aa 1b       	sub	r26, r26
    1ade:	bb 1b       	sub	r27, r27
    1ae0:	fd 01       	movw	r30, r26
    1ae2:	0d c0       	rjmp	.+26     	; 0x1afe <__udivmodsi4_ep>

00001ae4 <__udivmodsi4_loop>:
    1ae4:	aa 1f       	adc	r26, r26
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	ee 1f       	adc	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	a2 17       	cp	r26, r18
    1aee:	b3 07       	cpc	r27, r19
    1af0:	e4 07       	cpc	r30, r20
    1af2:	f5 07       	cpc	r31, r21
    1af4:	20 f0       	brcs	.+8      	; 0x1afe <__udivmodsi4_ep>
    1af6:	a2 1b       	sub	r26, r18
    1af8:	b3 0b       	sbc	r27, r19
    1afa:	e4 0b       	sbc	r30, r20
    1afc:	f5 0b       	sbc	r31, r21

00001afe <__udivmodsi4_ep>:
    1afe:	66 1f       	adc	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	88 1f       	adc	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	1a 94       	dec	r1
    1b08:	69 f7       	brne	.-38     	; 0x1ae4 <__udivmodsi4_loop>
    1b0a:	60 95       	com	r22
    1b0c:	70 95       	com	r23
    1b0e:	80 95       	com	r24
    1b10:	90 95       	com	r25
    1b12:	9b 01       	movw	r18, r22
    1b14:	ac 01       	movw	r20, r24
    1b16:	bd 01       	movw	r22, r26
    1b18:	cf 01       	movw	r24, r30
    1b1a:	08 95       	ret

00001b1c <strcmp>:
    1b1c:	fb 01       	movw	r30, r22
    1b1e:	dc 01       	movw	r26, r24
    1b20:	8d 91       	ld	r24, X+
    1b22:	01 90       	ld	r0, Z+
    1b24:	80 19       	sub	r24, r0
    1b26:	01 10       	cpse	r0, r1
    1b28:	d9 f3       	breq	.-10     	; 0x1b20 <strcmp+0x4>
    1b2a:	99 0b       	sbc	r25, r25
    1b2c:	08 95       	ret

00001b2e <sprintf>:
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	0d 89       	ldd	r16, Y+21	; 0x15
    1b48:	1e 89       	ldd	r17, Y+22	; 0x16
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
    1b4e:	1a 83       	std	Y+2, r17	; 0x02
    1b50:	09 83       	std	Y+1, r16	; 0x01
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	9f e7       	ldi	r25, 0x7F	; 127
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	ae 01       	movw	r20, r28
    1b5c:	47 5e       	subi	r20, 0xE7	; 231
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	6f 89       	ldd	r22, Y+23	; 0x17
    1b62:	78 8d       	ldd	r23, Y+24	; 0x18
    1b64:	ce 01       	movw	r24, r28
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	10 d0       	rcall	.+32     	; 0x1b8a <vfprintf>
    1b6a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b6c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b6e:	e0 0f       	add	r30, r16
    1b70:	f1 1f       	adc	r31, r17
    1b72:	10 82       	st	Z, r1
    1b74:	2e 96       	adiw	r28, 0x0e	; 14
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret

00001b8a <vfprintf>:
    1b8a:	2f 92       	push	r2
    1b8c:	3f 92       	push	r3
    1b8e:	4f 92       	push	r4
    1b90:	5f 92       	push	r5
    1b92:	6f 92       	push	r6
    1b94:	7f 92       	push	r7
    1b96:	8f 92       	push	r8
    1b98:	9f 92       	push	r9
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	2b 97       	sbiw	r28, 0x0b	; 11
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	6c 01       	movw	r12, r24
    1bc0:	7b 01       	movw	r14, r22
    1bc2:	8a 01       	movw	r16, r20
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	17 82       	std	Z+7, r1	; 0x07
    1bc8:	16 82       	std	Z+6, r1	; 0x06
    1bca:	83 81       	ldd	r24, Z+3	; 0x03
    1bcc:	81 ff       	sbrs	r24, 1
    1bce:	bf c1       	rjmp	.+894    	; 0x1f4e <vfprintf+0x3c4>
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	3c 01       	movw	r6, r24
    1bd6:	f6 01       	movw	r30, r12
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	f7 01       	movw	r30, r14
    1bdc:	93 fd       	sbrc	r25, 3
    1bde:	85 91       	lpm	r24, Z+
    1be0:	93 ff       	sbrs	r25, 3
    1be2:	81 91       	ld	r24, Z+
    1be4:	7f 01       	movw	r14, r30
    1be6:	88 23       	and	r24, r24
    1be8:	09 f4       	brne	.+2      	; 0x1bec <vfprintf+0x62>
    1bea:	ad c1       	rjmp	.+858    	; 0x1f46 <vfprintf+0x3bc>
    1bec:	85 32       	cpi	r24, 0x25	; 37
    1bee:	39 f4       	brne	.+14     	; 0x1bfe <vfprintf+0x74>
    1bf0:	93 fd       	sbrc	r25, 3
    1bf2:	85 91       	lpm	r24, Z+
    1bf4:	93 ff       	sbrs	r25, 3
    1bf6:	81 91       	ld	r24, Z+
    1bf8:	7f 01       	movw	r14, r30
    1bfa:	85 32       	cpi	r24, 0x25	; 37
    1bfc:	21 f4       	brne	.+8      	; 0x1c06 <vfprintf+0x7c>
    1bfe:	b6 01       	movw	r22, r12
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	d6 d1       	rcall	.+940    	; 0x1fb0 <fputc>
    1c04:	e8 cf       	rjmp	.-48     	; 0x1bd6 <vfprintf+0x4c>
    1c06:	91 2c       	mov	r9, r1
    1c08:	21 2c       	mov	r2, r1
    1c0a:	31 2c       	mov	r3, r1
    1c0c:	ff e1       	ldi	r31, 0x1F	; 31
    1c0e:	f3 15       	cp	r31, r3
    1c10:	d8 f0       	brcs	.+54     	; 0x1c48 <vfprintf+0xbe>
    1c12:	8b 32       	cpi	r24, 0x2B	; 43
    1c14:	79 f0       	breq	.+30     	; 0x1c34 <vfprintf+0xaa>
    1c16:	38 f4       	brcc	.+14     	; 0x1c26 <vfprintf+0x9c>
    1c18:	80 32       	cpi	r24, 0x20	; 32
    1c1a:	79 f0       	breq	.+30     	; 0x1c3a <vfprintf+0xb0>
    1c1c:	83 32       	cpi	r24, 0x23	; 35
    1c1e:	a1 f4       	brne	.+40     	; 0x1c48 <vfprintf+0xbe>
    1c20:	23 2d       	mov	r18, r3
    1c22:	20 61       	ori	r18, 0x10	; 16
    1c24:	1d c0       	rjmp	.+58     	; 0x1c60 <vfprintf+0xd6>
    1c26:	8d 32       	cpi	r24, 0x2D	; 45
    1c28:	61 f0       	breq	.+24     	; 0x1c42 <vfprintf+0xb8>
    1c2a:	80 33       	cpi	r24, 0x30	; 48
    1c2c:	69 f4       	brne	.+26     	; 0x1c48 <vfprintf+0xbe>
    1c2e:	23 2d       	mov	r18, r3
    1c30:	21 60       	ori	r18, 0x01	; 1
    1c32:	16 c0       	rjmp	.+44     	; 0x1c60 <vfprintf+0xd6>
    1c34:	83 2d       	mov	r24, r3
    1c36:	82 60       	ori	r24, 0x02	; 2
    1c38:	38 2e       	mov	r3, r24
    1c3a:	e3 2d       	mov	r30, r3
    1c3c:	e4 60       	ori	r30, 0x04	; 4
    1c3e:	3e 2e       	mov	r3, r30
    1c40:	2a c0       	rjmp	.+84     	; 0x1c96 <vfprintf+0x10c>
    1c42:	f3 2d       	mov	r31, r3
    1c44:	f8 60       	ori	r31, 0x08	; 8
    1c46:	1d c0       	rjmp	.+58     	; 0x1c82 <vfprintf+0xf8>
    1c48:	37 fc       	sbrc	r3, 7
    1c4a:	2d c0       	rjmp	.+90     	; 0x1ca6 <vfprintf+0x11c>
    1c4c:	20 ed       	ldi	r18, 0xD0	; 208
    1c4e:	28 0f       	add	r18, r24
    1c50:	2a 30       	cpi	r18, 0x0A	; 10
    1c52:	40 f0       	brcs	.+16     	; 0x1c64 <vfprintf+0xda>
    1c54:	8e 32       	cpi	r24, 0x2E	; 46
    1c56:	b9 f4       	brne	.+46     	; 0x1c86 <vfprintf+0xfc>
    1c58:	36 fc       	sbrc	r3, 6
    1c5a:	75 c1       	rjmp	.+746    	; 0x1f46 <vfprintf+0x3bc>
    1c5c:	23 2d       	mov	r18, r3
    1c5e:	20 64       	ori	r18, 0x40	; 64
    1c60:	32 2e       	mov	r3, r18
    1c62:	19 c0       	rjmp	.+50     	; 0x1c96 <vfprintf+0x10c>
    1c64:	36 fe       	sbrs	r3, 6
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <vfprintf+0xea>
    1c68:	8a e0       	ldi	r24, 0x0A	; 10
    1c6a:	98 9e       	mul	r9, r24
    1c6c:	20 0d       	add	r18, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	92 2e       	mov	r9, r18
    1c72:	11 c0       	rjmp	.+34     	; 0x1c96 <vfprintf+0x10c>
    1c74:	ea e0       	ldi	r30, 0x0A	; 10
    1c76:	2e 9e       	mul	r2, r30
    1c78:	20 0d       	add	r18, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	22 2e       	mov	r2, r18
    1c7e:	f3 2d       	mov	r31, r3
    1c80:	f0 62       	ori	r31, 0x20	; 32
    1c82:	3f 2e       	mov	r3, r31
    1c84:	08 c0       	rjmp	.+16     	; 0x1c96 <vfprintf+0x10c>
    1c86:	8c 36       	cpi	r24, 0x6C	; 108
    1c88:	21 f4       	brne	.+8      	; 0x1c92 <vfprintf+0x108>
    1c8a:	83 2d       	mov	r24, r3
    1c8c:	80 68       	ori	r24, 0x80	; 128
    1c8e:	38 2e       	mov	r3, r24
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <vfprintf+0x10c>
    1c92:	88 36       	cpi	r24, 0x68	; 104
    1c94:	41 f4       	brne	.+16     	; 0x1ca6 <vfprintf+0x11c>
    1c96:	f7 01       	movw	r30, r14
    1c98:	93 fd       	sbrc	r25, 3
    1c9a:	85 91       	lpm	r24, Z+
    1c9c:	93 ff       	sbrs	r25, 3
    1c9e:	81 91       	ld	r24, Z+
    1ca0:	7f 01       	movw	r14, r30
    1ca2:	81 11       	cpse	r24, r1
    1ca4:	b3 cf       	rjmp	.-154    	; 0x1c0c <vfprintf+0x82>
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	9f 7d       	andi	r25, 0xDF	; 223
    1caa:	95 54       	subi	r25, 0x45	; 69
    1cac:	93 30       	cpi	r25, 0x03	; 3
    1cae:	28 f4       	brcc	.+10     	; 0x1cba <vfprintf+0x130>
    1cb0:	0c 5f       	subi	r16, 0xFC	; 252
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	9f e3       	ldi	r25, 0x3F	; 63
    1cb6:	99 83       	std	Y+1, r25	; 0x01
    1cb8:	0d c0       	rjmp	.+26     	; 0x1cd4 <vfprintf+0x14a>
    1cba:	83 36       	cpi	r24, 0x63	; 99
    1cbc:	31 f0       	breq	.+12     	; 0x1cca <vfprintf+0x140>
    1cbe:	83 37       	cpi	r24, 0x73	; 115
    1cc0:	71 f0       	breq	.+28     	; 0x1cde <vfprintf+0x154>
    1cc2:	83 35       	cpi	r24, 0x53	; 83
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <vfprintf+0x13e>
    1cc6:	55 c0       	rjmp	.+170    	; 0x1d72 <vfprintf+0x1e8>
    1cc8:	20 c0       	rjmp	.+64     	; 0x1d0a <vfprintf+0x180>
    1cca:	f8 01       	movw	r30, r16
    1ccc:	80 81       	ld	r24, Z
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	0e 5f       	subi	r16, 0xFE	; 254
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	88 24       	eor	r8, r8
    1cd6:	83 94       	inc	r8
    1cd8:	91 2c       	mov	r9, r1
    1cda:	53 01       	movw	r10, r6
    1cdc:	12 c0       	rjmp	.+36     	; 0x1d02 <vfprintf+0x178>
    1cde:	28 01       	movw	r4, r16
    1ce0:	f2 e0       	ldi	r31, 0x02	; 2
    1ce2:	4f 0e       	add	r4, r31
    1ce4:	51 1c       	adc	r5, r1
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	a0 80       	ld	r10, Z
    1cea:	b1 80       	ldd	r11, Z+1	; 0x01
    1cec:	36 fe       	sbrs	r3, 6
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <vfprintf+0x16c>
    1cf0:	69 2d       	mov	r22, r9
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <vfprintf+0x170>
    1cf6:	6f ef       	ldi	r22, 0xFF	; 255
    1cf8:	7f ef       	ldi	r23, 0xFF	; 255
    1cfa:	c5 01       	movw	r24, r10
    1cfc:	4e d1       	rcall	.+668    	; 0x1f9a <strnlen>
    1cfe:	4c 01       	movw	r8, r24
    1d00:	82 01       	movw	r16, r4
    1d02:	f3 2d       	mov	r31, r3
    1d04:	ff 77       	andi	r31, 0x7F	; 127
    1d06:	3f 2e       	mov	r3, r31
    1d08:	15 c0       	rjmp	.+42     	; 0x1d34 <vfprintf+0x1aa>
    1d0a:	28 01       	movw	r4, r16
    1d0c:	22 e0       	ldi	r18, 0x02	; 2
    1d0e:	42 0e       	add	r4, r18
    1d10:	51 1c       	adc	r5, r1
    1d12:	f8 01       	movw	r30, r16
    1d14:	a0 80       	ld	r10, Z
    1d16:	b1 80       	ldd	r11, Z+1	; 0x01
    1d18:	36 fe       	sbrs	r3, 6
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <vfprintf+0x198>
    1d1c:	69 2d       	mov	r22, r9
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <vfprintf+0x19c>
    1d22:	6f ef       	ldi	r22, 0xFF	; 255
    1d24:	7f ef       	ldi	r23, 0xFF	; 255
    1d26:	c5 01       	movw	r24, r10
    1d28:	2d d1       	rcall	.+602    	; 0x1f84 <strnlen_P>
    1d2a:	4c 01       	movw	r8, r24
    1d2c:	f3 2d       	mov	r31, r3
    1d2e:	f0 68       	ori	r31, 0x80	; 128
    1d30:	3f 2e       	mov	r3, r31
    1d32:	82 01       	movw	r16, r4
    1d34:	33 fc       	sbrc	r3, 3
    1d36:	19 c0       	rjmp	.+50     	; 0x1d6a <vfprintf+0x1e0>
    1d38:	82 2d       	mov	r24, r2
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	88 16       	cp	r8, r24
    1d3e:	99 06       	cpc	r9, r25
    1d40:	a0 f4       	brcc	.+40     	; 0x1d6a <vfprintf+0x1e0>
    1d42:	b6 01       	movw	r22, r12
    1d44:	80 e2       	ldi	r24, 0x20	; 32
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	33 d1       	rcall	.+614    	; 0x1fb0 <fputc>
    1d4a:	2a 94       	dec	r2
    1d4c:	f5 cf       	rjmp	.-22     	; 0x1d38 <vfprintf+0x1ae>
    1d4e:	f5 01       	movw	r30, r10
    1d50:	37 fc       	sbrc	r3, 7
    1d52:	85 91       	lpm	r24, Z+
    1d54:	37 fe       	sbrs	r3, 7
    1d56:	81 91       	ld	r24, Z+
    1d58:	5f 01       	movw	r10, r30
    1d5a:	b6 01       	movw	r22, r12
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	28 d1       	rcall	.+592    	; 0x1fb0 <fputc>
    1d60:	21 10       	cpse	r2, r1
    1d62:	2a 94       	dec	r2
    1d64:	21 e0       	ldi	r18, 0x01	; 1
    1d66:	82 1a       	sub	r8, r18
    1d68:	91 08       	sbc	r9, r1
    1d6a:	81 14       	cp	r8, r1
    1d6c:	91 04       	cpc	r9, r1
    1d6e:	79 f7       	brne	.-34     	; 0x1d4e <vfprintf+0x1c4>
    1d70:	e1 c0       	rjmp	.+450    	; 0x1f34 <vfprintf+0x3aa>
    1d72:	84 36       	cpi	r24, 0x64	; 100
    1d74:	11 f0       	breq	.+4      	; 0x1d7a <vfprintf+0x1f0>
    1d76:	89 36       	cpi	r24, 0x69	; 105
    1d78:	39 f5       	brne	.+78     	; 0x1dc8 <vfprintf+0x23e>
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	37 fe       	sbrs	r3, 7
    1d7e:	07 c0       	rjmp	.+14     	; 0x1d8e <vfprintf+0x204>
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	93 81       	ldd	r25, Z+3	; 0x03
    1d88:	0c 5f       	subi	r16, 0xFC	; 252
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	08 c0       	rjmp	.+16     	; 0x1d9e <vfprintf+0x214>
    1d8e:	60 81       	ld	r22, Z
    1d90:	71 81       	ldd	r23, Z+1	; 0x01
    1d92:	07 2e       	mov	r0, r23
    1d94:	00 0c       	add	r0, r0
    1d96:	88 0b       	sbc	r24, r24
    1d98:	99 0b       	sbc	r25, r25
    1d9a:	0e 5f       	subi	r16, 0xFE	; 254
    1d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9e:	f3 2d       	mov	r31, r3
    1da0:	ff 76       	andi	r31, 0x6F	; 111
    1da2:	3f 2e       	mov	r3, r31
    1da4:	97 ff       	sbrs	r25, 7
    1da6:	09 c0       	rjmp	.+18     	; 0x1dba <vfprintf+0x230>
    1da8:	90 95       	com	r25
    1daa:	80 95       	com	r24
    1dac:	70 95       	com	r23
    1dae:	61 95       	neg	r22
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	8f 4f       	sbci	r24, 0xFF	; 255
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	f0 68       	ori	r31, 0x80	; 128
    1db8:	3f 2e       	mov	r3, r31
    1dba:	2a e0       	ldi	r18, 0x0A	; 10
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	a3 01       	movw	r20, r6
    1dc0:	33 d1       	rcall	.+614    	; 0x2028 <__ultoa_invert>
    1dc2:	88 2e       	mov	r8, r24
    1dc4:	86 18       	sub	r8, r6
    1dc6:	44 c0       	rjmp	.+136    	; 0x1e50 <vfprintf+0x2c6>
    1dc8:	85 37       	cpi	r24, 0x75	; 117
    1dca:	31 f4       	brne	.+12     	; 0x1dd8 <vfprintf+0x24e>
    1dcc:	23 2d       	mov	r18, r3
    1dce:	2f 7e       	andi	r18, 0xEF	; 239
    1dd0:	b2 2e       	mov	r11, r18
    1dd2:	2a e0       	ldi	r18, 0x0A	; 10
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	25 c0       	rjmp	.+74     	; 0x1e22 <vfprintf+0x298>
    1dd8:	93 2d       	mov	r25, r3
    1dda:	99 7f       	andi	r25, 0xF9	; 249
    1ddc:	b9 2e       	mov	r11, r25
    1dde:	8f 36       	cpi	r24, 0x6F	; 111
    1de0:	c1 f0       	breq	.+48     	; 0x1e12 <vfprintf+0x288>
    1de2:	18 f4       	brcc	.+6      	; 0x1dea <vfprintf+0x260>
    1de4:	88 35       	cpi	r24, 0x58	; 88
    1de6:	79 f0       	breq	.+30     	; 0x1e06 <vfprintf+0x27c>
    1de8:	ae c0       	rjmp	.+348    	; 0x1f46 <vfprintf+0x3bc>
    1dea:	80 37       	cpi	r24, 0x70	; 112
    1dec:	19 f0       	breq	.+6      	; 0x1df4 <vfprintf+0x26a>
    1dee:	88 37       	cpi	r24, 0x78	; 120
    1df0:	21 f0       	breq	.+8      	; 0x1dfa <vfprintf+0x270>
    1df2:	a9 c0       	rjmp	.+338    	; 0x1f46 <vfprintf+0x3bc>
    1df4:	e9 2f       	mov	r30, r25
    1df6:	e0 61       	ori	r30, 0x10	; 16
    1df8:	be 2e       	mov	r11, r30
    1dfa:	b4 fe       	sbrs	r11, 4
    1dfc:	0d c0       	rjmp	.+26     	; 0x1e18 <vfprintf+0x28e>
    1dfe:	fb 2d       	mov	r31, r11
    1e00:	f4 60       	ori	r31, 0x04	; 4
    1e02:	bf 2e       	mov	r11, r31
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <vfprintf+0x28e>
    1e06:	34 fe       	sbrs	r3, 4
    1e08:	0a c0       	rjmp	.+20     	; 0x1e1e <vfprintf+0x294>
    1e0a:	29 2f       	mov	r18, r25
    1e0c:	26 60       	ori	r18, 0x06	; 6
    1e0e:	b2 2e       	mov	r11, r18
    1e10:	06 c0       	rjmp	.+12     	; 0x1e1e <vfprintf+0x294>
    1e12:	28 e0       	ldi	r18, 0x08	; 8
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <vfprintf+0x298>
    1e18:	20 e1       	ldi	r18, 0x10	; 16
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <vfprintf+0x298>
    1e1e:	20 e1       	ldi	r18, 0x10	; 16
    1e20:	32 e0       	ldi	r19, 0x02	; 2
    1e22:	f8 01       	movw	r30, r16
    1e24:	b7 fe       	sbrs	r11, 7
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <vfprintf+0x2ac>
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	0c 5f       	subi	r16, 0xFC	; 252
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <vfprintf+0x2b8>
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 5f       	subi	r16, 0xFE	; 254
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	a3 01       	movw	r20, r6
    1e44:	f1 d0       	rcall	.+482    	; 0x2028 <__ultoa_invert>
    1e46:	88 2e       	mov	r8, r24
    1e48:	86 18       	sub	r8, r6
    1e4a:	fb 2d       	mov	r31, r11
    1e4c:	ff 77       	andi	r31, 0x7F	; 127
    1e4e:	3f 2e       	mov	r3, r31
    1e50:	36 fe       	sbrs	r3, 6
    1e52:	0d c0       	rjmp	.+26     	; 0x1e6e <vfprintf+0x2e4>
    1e54:	23 2d       	mov	r18, r3
    1e56:	2e 7f       	andi	r18, 0xFE	; 254
    1e58:	a2 2e       	mov	r10, r18
    1e5a:	89 14       	cp	r8, r9
    1e5c:	58 f4       	brcc	.+22     	; 0x1e74 <vfprintf+0x2ea>
    1e5e:	34 fe       	sbrs	r3, 4
    1e60:	0b c0       	rjmp	.+22     	; 0x1e78 <vfprintf+0x2ee>
    1e62:	32 fc       	sbrc	r3, 2
    1e64:	09 c0       	rjmp	.+18     	; 0x1e78 <vfprintf+0x2ee>
    1e66:	83 2d       	mov	r24, r3
    1e68:	8e 7e       	andi	r24, 0xEE	; 238
    1e6a:	a8 2e       	mov	r10, r24
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <vfprintf+0x2ee>
    1e6e:	b8 2c       	mov	r11, r8
    1e70:	a3 2c       	mov	r10, r3
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <vfprintf+0x2f0>
    1e74:	b8 2c       	mov	r11, r8
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <vfprintf+0x2f0>
    1e78:	b9 2c       	mov	r11, r9
    1e7a:	a4 fe       	sbrs	r10, 4
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <vfprintf+0x312>
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e8 0d       	add	r30, r8
    1e82:	f1 1d       	adc	r31, r1
    1e84:	80 81       	ld	r24, Z
    1e86:	80 33       	cpi	r24, 0x30	; 48
    1e88:	21 f4       	brne	.+8      	; 0x1e92 <vfprintf+0x308>
    1e8a:	9a 2d       	mov	r25, r10
    1e8c:	99 7e       	andi	r25, 0xE9	; 233
    1e8e:	a9 2e       	mov	r10, r25
    1e90:	09 c0       	rjmp	.+18     	; 0x1ea4 <vfprintf+0x31a>
    1e92:	a2 fe       	sbrs	r10, 2
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <vfprintf+0x318>
    1e96:	b3 94       	inc	r11
    1e98:	b3 94       	inc	r11
    1e9a:	04 c0       	rjmp	.+8      	; 0x1ea4 <vfprintf+0x31a>
    1e9c:	8a 2d       	mov	r24, r10
    1e9e:	86 78       	andi	r24, 0x86	; 134
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <vfprintf+0x31a>
    1ea2:	b3 94       	inc	r11
    1ea4:	a3 fc       	sbrc	r10, 3
    1ea6:	10 c0       	rjmp	.+32     	; 0x1ec8 <vfprintf+0x33e>
    1ea8:	a0 fe       	sbrs	r10, 0
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <vfprintf+0x32e>
    1eac:	b2 14       	cp	r11, r2
    1eae:	80 f4       	brcc	.+32     	; 0x1ed0 <vfprintf+0x346>
    1eb0:	28 0c       	add	r2, r8
    1eb2:	92 2c       	mov	r9, r2
    1eb4:	9b 18       	sub	r9, r11
    1eb6:	0d c0       	rjmp	.+26     	; 0x1ed2 <vfprintf+0x348>
    1eb8:	b2 14       	cp	r11, r2
    1eba:	58 f4       	brcc	.+22     	; 0x1ed2 <vfprintf+0x348>
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	80 e2       	ldi	r24, 0x20	; 32
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	76 d0       	rcall	.+236    	; 0x1fb0 <fputc>
    1ec4:	b3 94       	inc	r11
    1ec6:	f8 cf       	rjmp	.-16     	; 0x1eb8 <vfprintf+0x32e>
    1ec8:	b2 14       	cp	r11, r2
    1eca:	18 f4       	brcc	.+6      	; 0x1ed2 <vfprintf+0x348>
    1ecc:	2b 18       	sub	r2, r11
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <vfprintf+0x34a>
    1ed0:	98 2c       	mov	r9, r8
    1ed2:	21 2c       	mov	r2, r1
    1ed4:	a4 fe       	sbrs	r10, 4
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <vfprintf+0x36c>
    1ed8:	b6 01       	movw	r22, r12
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	68 d0       	rcall	.+208    	; 0x1fb0 <fputc>
    1ee0:	a2 fe       	sbrs	r10, 2
    1ee2:	16 c0       	rjmp	.+44     	; 0x1f10 <vfprintf+0x386>
    1ee4:	a1 fc       	sbrc	r10, 1
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <vfprintf+0x364>
    1ee8:	88 e7       	ldi	r24, 0x78	; 120
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <vfprintf+0x368>
    1eee:	88 e5       	ldi	r24, 0x58	; 88
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	0c c0       	rjmp	.+24     	; 0x1f0e <vfprintf+0x384>
    1ef6:	8a 2d       	mov	r24, r10
    1ef8:	86 78       	andi	r24, 0x86	; 134
    1efa:	51 f0       	breq	.+20     	; 0x1f10 <vfprintf+0x386>
    1efc:	a1 fe       	sbrs	r10, 1
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <vfprintf+0x37a>
    1f00:	8b e2       	ldi	r24, 0x2B	; 43
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <vfprintf+0x37c>
    1f04:	80 e2       	ldi	r24, 0x20	; 32
    1f06:	a7 fc       	sbrc	r10, 7
    1f08:	8d e2       	ldi	r24, 0x2D	; 45
    1f0a:	b6 01       	movw	r22, r12
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	50 d0       	rcall	.+160    	; 0x1fb0 <fputc>
    1f10:	89 14       	cp	r8, r9
    1f12:	30 f4       	brcc	.+12     	; 0x1f20 <vfprintf+0x396>
    1f14:	b6 01       	movw	r22, r12
    1f16:	80 e3       	ldi	r24, 0x30	; 48
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	4a d0       	rcall	.+148    	; 0x1fb0 <fputc>
    1f1c:	9a 94       	dec	r9
    1f1e:	f8 cf       	rjmp	.-16     	; 0x1f10 <vfprintf+0x386>
    1f20:	8a 94       	dec	r8
    1f22:	f3 01       	movw	r30, r6
    1f24:	e8 0d       	add	r30, r8
    1f26:	f1 1d       	adc	r31, r1
    1f28:	80 81       	ld	r24, Z
    1f2a:	b6 01       	movw	r22, r12
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	40 d0       	rcall	.+128    	; 0x1fb0 <fputc>
    1f30:	81 10       	cpse	r8, r1
    1f32:	f6 cf       	rjmp	.-20     	; 0x1f20 <vfprintf+0x396>
    1f34:	22 20       	and	r2, r2
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <vfprintf+0x3b0>
    1f38:	4e ce       	rjmp	.-868    	; 0x1bd6 <vfprintf+0x4c>
    1f3a:	b6 01       	movw	r22, r12
    1f3c:	80 e2       	ldi	r24, 0x20	; 32
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	37 d0       	rcall	.+110    	; 0x1fb0 <fputc>
    1f42:	2a 94       	dec	r2
    1f44:	f7 cf       	rjmp	.-18     	; 0x1f34 <vfprintf+0x3aa>
    1f46:	f6 01       	movw	r30, r12
    1f48:	86 81       	ldd	r24, Z+6	; 0x06
    1f4a:	97 81       	ldd	r25, Z+7	; 0x07
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <vfprintf+0x3c8>
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	9f ef       	ldi	r25, 0xFF	; 255
    1f52:	2b 96       	adiw	r28, 0x0b	; 11
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	bf 90       	pop	r11
    1f70:	af 90       	pop	r10
    1f72:	9f 90       	pop	r9
    1f74:	8f 90       	pop	r8
    1f76:	7f 90       	pop	r7
    1f78:	6f 90       	pop	r6
    1f7a:	5f 90       	pop	r5
    1f7c:	4f 90       	pop	r4
    1f7e:	3f 90       	pop	r3
    1f80:	2f 90       	pop	r2
    1f82:	08 95       	ret

00001f84 <strnlen_P>:
    1f84:	fc 01       	movw	r30, r24
    1f86:	05 90       	lpm	r0, Z+
    1f88:	61 50       	subi	r22, 0x01	; 1
    1f8a:	70 40       	sbci	r23, 0x00	; 0
    1f8c:	01 10       	cpse	r0, r1
    1f8e:	d8 f7       	brcc	.-10     	; 0x1f86 <strnlen_P+0x2>
    1f90:	80 95       	com	r24
    1f92:	90 95       	com	r25
    1f94:	8e 0f       	add	r24, r30
    1f96:	9f 1f       	adc	r25, r31
    1f98:	08 95       	ret

00001f9a <strnlen>:
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	61 50       	subi	r22, 0x01	; 1
    1f9e:	70 40       	sbci	r23, 0x00	; 0
    1fa0:	01 90       	ld	r0, Z+
    1fa2:	01 10       	cpse	r0, r1
    1fa4:	d8 f7       	brcc	.-10     	; 0x1f9c <strnlen+0x2>
    1fa6:	80 95       	com	r24
    1fa8:	90 95       	com	r25
    1faa:	8e 0f       	add	r24, r30
    1fac:	9f 1f       	adc	r25, r31
    1fae:	08 95       	ret

00001fb0 <fputc>:
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	fb 01       	movw	r30, r22
    1fba:	23 81       	ldd	r18, Z+3	; 0x03
    1fbc:	21 fd       	sbrc	r18, 1
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <fputc+0x16>
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	9f ef       	ldi	r25, 0xFF	; 255
    1fc4:	2c c0       	rjmp	.+88     	; 0x201e <fputc+0x6e>
    1fc6:	22 ff       	sbrs	r18, 2
    1fc8:	16 c0       	rjmp	.+44     	; 0x1ff6 <fputc+0x46>
    1fca:	46 81       	ldd	r20, Z+6	; 0x06
    1fcc:	57 81       	ldd	r21, Z+7	; 0x07
    1fce:	24 81       	ldd	r18, Z+4	; 0x04
    1fd0:	35 81       	ldd	r19, Z+5	; 0x05
    1fd2:	42 17       	cp	r20, r18
    1fd4:	53 07       	cpc	r21, r19
    1fd6:	44 f4       	brge	.+16     	; 0x1fe8 <fputc+0x38>
    1fd8:	a0 81       	ld	r26, Z
    1fda:	b1 81       	ldd	r27, Z+1	; 0x01
    1fdc:	9d 01       	movw	r18, r26
    1fde:	2f 5f       	subi	r18, 0xFF	; 255
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	31 83       	std	Z+1, r19	; 0x01
    1fe4:	20 83       	st	Z, r18
    1fe6:	8c 93       	st	X, r24
    1fe8:	26 81       	ldd	r18, Z+6	; 0x06
    1fea:	37 81       	ldd	r19, Z+7	; 0x07
    1fec:	2f 5f       	subi	r18, 0xFF	; 255
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	37 83       	std	Z+7, r19	; 0x07
    1ff2:	26 83       	std	Z+6, r18	; 0x06
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <fputc+0x6e>
    1ff6:	8b 01       	movw	r16, r22
    1ff8:	ec 01       	movw	r28, r24
    1ffa:	fb 01       	movw	r30, r22
    1ffc:	00 84       	ldd	r0, Z+8	; 0x08
    1ffe:	f1 85       	ldd	r31, Z+9	; 0x09
    2000:	e0 2d       	mov	r30, r0
    2002:	09 95       	icall
    2004:	89 2b       	or	r24, r25
    2006:	e1 f6       	brne	.-72     	; 0x1fc0 <fputc+0x10>
    2008:	d8 01       	movw	r26, r16
    200a:	16 96       	adiw	r26, 0x06	; 6
    200c:	8d 91       	ld	r24, X+
    200e:	9c 91       	ld	r25, X
    2010:	17 97       	sbiw	r26, 0x07	; 7
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	17 96       	adiw	r26, 0x07	; 7
    2016:	9c 93       	st	X, r25
    2018:	8e 93       	st	-X, r24
    201a:	16 97       	sbiw	r26, 0x06	; 6
    201c:	ce 01       	movw	r24, r28
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	08 95       	ret

00002028 <__ultoa_invert>:
    2028:	fa 01       	movw	r30, r20
    202a:	aa 27       	eor	r26, r26
    202c:	28 30       	cpi	r18, 0x08	; 8
    202e:	51 f1       	breq	.+84     	; 0x2084 <__ultoa_invert+0x5c>
    2030:	20 31       	cpi	r18, 0x10	; 16
    2032:	81 f1       	breq	.+96     	; 0x2094 <__ultoa_invert+0x6c>
    2034:	e8 94       	clt
    2036:	6f 93       	push	r22
    2038:	6e 7f       	andi	r22, 0xFE	; 254
    203a:	6e 5f       	subi	r22, 0xFE	; 254
    203c:	7f 4f       	sbci	r23, 0xFF	; 255
    203e:	8f 4f       	sbci	r24, 0xFF	; 255
    2040:	9f 4f       	sbci	r25, 0xFF	; 255
    2042:	af 4f       	sbci	r26, 0xFF	; 255
    2044:	b1 e0       	ldi	r27, 0x01	; 1
    2046:	3e d0       	rcall	.+124    	; 0x20c4 <__ultoa_invert+0x9c>
    2048:	b4 e0       	ldi	r27, 0x04	; 4
    204a:	3c d0       	rcall	.+120    	; 0x20c4 <__ultoa_invert+0x9c>
    204c:	67 0f       	add	r22, r23
    204e:	78 1f       	adc	r23, r24
    2050:	89 1f       	adc	r24, r25
    2052:	9a 1f       	adc	r25, r26
    2054:	a1 1d       	adc	r26, r1
    2056:	68 0f       	add	r22, r24
    2058:	79 1f       	adc	r23, r25
    205a:	8a 1f       	adc	r24, r26
    205c:	91 1d       	adc	r25, r1
    205e:	a1 1d       	adc	r26, r1
    2060:	6a 0f       	add	r22, r26
    2062:	71 1d       	adc	r23, r1
    2064:	81 1d       	adc	r24, r1
    2066:	91 1d       	adc	r25, r1
    2068:	a1 1d       	adc	r26, r1
    206a:	20 d0       	rcall	.+64     	; 0x20ac <__ultoa_invert+0x84>
    206c:	09 f4       	brne	.+2      	; 0x2070 <__ultoa_invert+0x48>
    206e:	68 94       	set
    2070:	3f 91       	pop	r19
    2072:	2a e0       	ldi	r18, 0x0A	; 10
    2074:	26 9f       	mul	r18, r22
    2076:	11 24       	eor	r1, r1
    2078:	30 19       	sub	r19, r0
    207a:	30 5d       	subi	r19, 0xD0	; 208
    207c:	31 93       	st	Z+, r19
    207e:	de f6       	brtc	.-74     	; 0x2036 <__ultoa_invert+0xe>
    2080:	cf 01       	movw	r24, r30
    2082:	08 95       	ret
    2084:	46 2f       	mov	r20, r22
    2086:	47 70       	andi	r20, 0x07	; 7
    2088:	40 5d       	subi	r20, 0xD0	; 208
    208a:	41 93       	st	Z+, r20
    208c:	b3 e0       	ldi	r27, 0x03	; 3
    208e:	0f d0       	rcall	.+30     	; 0x20ae <__ultoa_invert+0x86>
    2090:	c9 f7       	brne	.-14     	; 0x2084 <__ultoa_invert+0x5c>
    2092:	f6 cf       	rjmp	.-20     	; 0x2080 <__ultoa_invert+0x58>
    2094:	46 2f       	mov	r20, r22
    2096:	4f 70       	andi	r20, 0x0F	; 15
    2098:	40 5d       	subi	r20, 0xD0	; 208
    209a:	4a 33       	cpi	r20, 0x3A	; 58
    209c:	18 f0       	brcs	.+6      	; 0x20a4 <__ultoa_invert+0x7c>
    209e:	49 5d       	subi	r20, 0xD9	; 217
    20a0:	31 fd       	sbrc	r19, 1
    20a2:	40 52       	subi	r20, 0x20	; 32
    20a4:	41 93       	st	Z+, r20
    20a6:	02 d0       	rcall	.+4      	; 0x20ac <__ultoa_invert+0x84>
    20a8:	a9 f7       	brne	.-22     	; 0x2094 <__ultoa_invert+0x6c>
    20aa:	ea cf       	rjmp	.-44     	; 0x2080 <__ultoa_invert+0x58>
    20ac:	b4 e0       	ldi	r27, 0x04	; 4
    20ae:	a6 95       	lsr	r26
    20b0:	97 95       	ror	r25
    20b2:	87 95       	ror	r24
    20b4:	77 95       	ror	r23
    20b6:	67 95       	ror	r22
    20b8:	ba 95       	dec	r27
    20ba:	c9 f7       	brne	.-14     	; 0x20ae <__ultoa_invert+0x86>
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	61 05       	cpc	r22, r1
    20c0:	71 05       	cpc	r23, r1
    20c2:	08 95       	ret
    20c4:	9b 01       	movw	r18, r22
    20c6:	ac 01       	movw	r20, r24
    20c8:	0a 2e       	mov	r0, r26
    20ca:	06 94       	lsr	r0
    20cc:	57 95       	ror	r21
    20ce:	47 95       	ror	r20
    20d0:	37 95       	ror	r19
    20d2:	27 95       	ror	r18
    20d4:	ba 95       	dec	r27
    20d6:	c9 f7       	brne	.-14     	; 0x20ca <__ultoa_invert+0xa2>
    20d8:	62 0f       	add	r22, r18
    20da:	73 1f       	adc	r23, r19
    20dc:	84 1f       	adc	r24, r20
    20de:	95 1f       	adc	r25, r21
    20e0:	a0 1d       	adc	r26, r0
    20e2:	08 95       	ret

000020e4 <_exit>:
    20e4:	f8 94       	cli

000020e6 <__stop_program>:
    20e6:	ff cf       	rjmp	.-2      	; 0x20e6 <__stop_program>
